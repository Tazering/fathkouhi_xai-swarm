2022-06-09 18:48:24,922 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-09 18:48:26,276 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.9117522930866076e-07, best pos: [-0.76234088 -0.8717785  -0.40831053  0.64469067  0.5140015   0.18670941
 -0.24309597  0.30296055  0.19342792 -0.18658512 -0.62837185  0.27701958
 -0.18806986 -0.16965693 -0.49364946 -0.77663574 -0.72324208  0.96147977]
2022-06-09 18:48:45,946 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-09 18:48:47,348 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.3878118728824982e-06, best pos: [ 0.28701479 -0.79820254  0.73648638 -0.56761307 -0.02828609 -0.64432993
 -0.34636011 -0.73595056  0.5355306   0.98924658  0.12467015  0.04714766
 -0.07764442 -0.3099909  -0.71107788 -0.28226235 -0.3979737   0.348669  ]
2022-06-09 18:48:50,028 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-09 18:48:51,386 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.1305082723402943e-07, best pos: [ 0.77694571  0.70074387 -0.1365991   0.8719022  -0.67160896 -0.60452756
 -0.63050538  0.87831715  0.46894707  0.54799487 -0.71564111 -0.13608571
  0.77697415  0.06904799 -0.27095687  0.87026359  0.71981731 -0.3512546 ]
2022-06-09 19:35:09,191 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-09 19:35:10,522 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.197071885223516e-10, best pos: [-0.58317914 -0.71239568  0.74942609  0.66796571 -0.24989578  0.11864928
 -0.1585321  -0.71210588  0.16307521 -0.98466877  0.6186419   0.05185678
 -0.35817128 -0.98251727  0.51838642 -0.89258333  0.47431064 -0.95053635]
2022-06-09 19:36:52,212 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-09 19:36:53,514 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 4.487155404871729e-05, best pos: [ 0.91555475 -0.03287355 -0.4411342   0.82336704 -0.67310791  0.25463802
 -0.14606541 -0.43039951 -0.05162426 -0.67612149 -0.47635491  0.23295108
 -0.27209127  0.66811817  0.98993603  0.85481999  0.89470448  0.74645103
  0.26025145  0.54515979  0.27337796 -0.21535775 -0.95633084 -0.97411468
 -0.60801928 -0.20808571 -0.51519521]
2022-06-10 11:08:41,630 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 11:08:43,020 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 9.156277388483173e-06, best pos: [ 0.40370031 -0.02657353 -0.38745564  0.87258577  0.13773229  0.9434353
 -0.01135813  0.34063628 -0.97974459  0.1891843   0.36797353 -0.5703749
  0.43246083 -0.60970644  0.38781148 -0.81699839  0.5046775  -0.87036902
 -0.5807075   0.72656673  0.7341232  -0.25330028 -0.45558765 -0.08883156
 -0.30580826  0.67980373  0.80274497]
2022-06-10 11:32:17,043 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 11:32:18,380 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 5.449603939465886e-10, best pos: [ 0.49103689  0.56912     0.17950563 -0.39949481  0.63907572  0.42428972
  0.36714276  0.36104177  0.49104725 -0.98386802  0.16280295 -0.03329535
 -0.42833485 -0.11500965  0.21305295  0.21526533  0.91639883  0.63890571]
2022-06-10 11:32:54,048 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 11:32:55,384 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.6491445717163202e-07, best pos: [-0.19300796 -0.54809787  0.1083376  -0.24980002  0.42882501 -0.8474117
 -0.39370879  0.50323913  0.35785053 -0.14540361  0.05135759  0.36602666
 -0.95806297 -0.47262865 -0.40951386 -0.42039884 -0.56581974  0.5852625 ]
2022-06-10 11:33:31,014 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 11:33:32,343 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.0198210528045817e-06, best pos: [-6.95749608e-01 -8.08861289e-01  3.21592810e-04  6.50741664e-01
 -3.79887588e-01  8.37792599e-01  5.06367367e-01  7.49158396e-01
  2.02303344e-01  2.54330542e-02 -3.42308987e-01  2.13917488e-02
  5.73317666e-01 -8.93396151e-01 -2.96596044e-03  1.33873394e-01
  5.40279825e-01 -6.49269796e-01]
2022-06-10 11:34:23,672 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 11:34:25,021 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.4194845047040386e-07, best pos: [ 0.05424665  0.27316395 -0.99397669 -0.00377927  0.53071192  0.49618617
  0.70827174 -0.90797481 -0.92522986 -0.2537171   0.93004189 -0.27527625
  0.33854384 -0.72376665 -0.21183964 -0.76862622 -0.95865929  0.11674456]
2022-06-10 11:34:49,889 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 11:34:51,255 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 6.2189130798552386e-06, best pos: [-0.07961083 -0.52307987 -0.30145452 -0.40682748 -0.42902107 -0.68897631
 -0.00885692  0.2752804   0.20741373  0.09392086  0.43032281 -0.05810717
 -0.03076386  0.38158216  0.43887212 -0.80597416  0.87922575  0.15512878]
2022-06-10 14:17:20,399 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:17:21,735 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.9897786869851407e-07, best pos: [ 0.33411605 -0.28861439  0.14917749 -0.55447859 -0.84990831  0.60827293
 -0.06540948 -0.07962556 -0.52618044  0.78377286  0.77862431 -0.31915326
 -0.39099494 -0.06841275  0.77337795  0.49171399 -0.64426673 -0.08587292
  0.50331892  0.87970807  0.74008035 -0.25645492 -0.92712401  0.56052799
 -0.55982356  0.22856237  0.92810112  0.4543354   0.27945627  0.23125105]
2022-06-10 14:17:45,437 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:17:46,790 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.351264915200379e-06, best pos: [ 0.42486854  0.32783653 -0.70278357 -0.50986486 -0.80681096 -0.18839546
 -0.4384543   0.01770863 -0.62219043 -0.52514467  0.98220453 -0.8168823
 -0.97093616 -0.68179324  0.33193042  0.69465588 -0.97653556  0.3700792
  0.40370801  0.47654497 -0.94192111  0.14154179 -0.30815789  0.56600681
  0.81906977  0.04280471 -0.28264195  0.47143357 -0.04676092 -0.60367411]
2022-06-10 14:31:17,386 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:31:18,744 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.2045892318011283e-06, best pos: [ 0.75469032 -0.65088616  0.82838321  0.95225376 -0.05993269 -0.97027738
  0.49925437 -0.03824198 -0.79768996 -0.90032147 -0.72829438  0.11006721
  0.284032   -0.53354003 -0.24012132 -0.03699506  0.8138964   0.43716847
  0.10477977  0.1728294   0.92744245 -0.93323911 -0.62170017 -0.63828402
  0.52240913 -0.3480903   0.75420165 -0.48144292  0.94864538 -0.0317537 ]
2022-06-10 14:34:18,625 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:34:20,000 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.1750701287152825e-07, best pos: [ 0.37274103  0.44138136  0.05777972  0.02788251 -0.02239497  0.50418462
  0.05106158  0.63457108 -0.60029792 -0.23931395 -0.38596153  0.21271461
 -0.67453508 -0.68019544 -0.9717933  -0.64021221  0.14566862  0.88976204]
2022-06-10 14:34:42,199 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:34:43,557 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 4.156820272855355e-06, best pos: [-0.44582423 -0.97825419  0.24096784 -0.73026576 -0.06421249  0.70365097
 -0.11761361 -0.58775553  0.49383896 -0.11069643 -0.23683172 -0.06158897
  0.54808569 -0.3120548   0.85544833 -0.7231646   0.56084945 -0.38608172]
2022-06-10 14:37:23,275 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:37:24,595 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.636102538979275e-06, best pos: [-9.36381227e-01 -2.52159991e-01 -9.80938398e-01  8.90934620e-01
 -8.41461731e-01  5.03505827e-01 -6.13615989e-01  2.34185985e-01
  1.26502064e-01  1.10089608e-01 -2.51493286e-01 -5.39531408e-04
  3.81815999e-01  5.38101024e-01 -8.54346639e-01 -7.42211743e-01
 -2.72792700e-02  3.34833886e-01]
2022-06-10 14:37:33,417 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:37:34,821 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.6148229735641897e-07, best pos: [-0.6139403  -0.46198394  0.88615578 -0.7511807   0.87744178  0.5936195
 -0.99182604 -0.01733674  0.68910715 -0.44950282  0.58806276 -0.20549935
  0.470983   -0.88809229  0.89154803 -0.51269317  0.45551235  0.95614083]
2022-06-10 14:39:33,731 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:39:35,072 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.6298227628907399e-06, best pos: [-0.37717199  0.08562663  0.13547121  0.29652982  0.30486753 -0.97812336
 -0.11740939 -0.88646167  0.76197042  0.12120234 -0.61431459 -0.10405955
  0.80741787 -0.00735065  0.2097912   0.2235776  -0.42906671  0.4852335 ]
2022-06-10 14:39:46,680 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:39:47,991 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.2832360968690002e-06, best pos: [ 0.12307654  0.36368847  0.77497022 -0.70756823 -0.03625203 -0.20249982
  0.877878    0.37843283  0.48111646  0.90256633 -0.69601434  0.24512796
 -0.41336405 -0.86203709 -0.74533327  0.27891455  0.43041228 -0.1015066 ]
2022-06-10 14:40:08,033 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:40:09,334 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 4.5099039753455364e-06, best pos: [ 0.00270518  0.19938807 -0.8991751  -0.38431216  0.7869598  -0.44662021
  0.11023088  0.38190143 -0.24840016  0.03754891 -0.19516739  0.13997408
 -0.50656012  0.0798814   0.7778999   0.00847211  0.30703187  0.95316411]
2022-06-10 14:45:11,118 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:45:12,471 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.7228678827151287e-06, best pos: [ 7.31706467e-01 -9.47364205e-01 -3.16566224e-01 -8.97570737e-01
 -1.89798549e-01 -8.26271235e-01  3.74381767e-04 -7.38463040e-01
 -7.86727379e-01 -4.93293233e-01 -7.06663759e-01  1.16271506e-01
  9.18682753e-01 -3.82825155e-02 -9.35390420e-01  8.69955550e-01
 -2.71633699e-01 -6.10284446e-01]
2022-06-10 14:45:33,661 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:45:35,035 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 4.4778381252746395e-07, best pos: [ 0.39971739 -0.75508101  0.37740215  0.25344907 -0.30627795  0.27587308
 -0.10044598  0.13707682  0.76386826 -0.93918617  0.19552836  0.08664206
 -0.10426816 -0.47816256 -0.16315683 -0.22091292  0.20804619 -0.46611355]
2022-06-10 14:46:23,874 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:46:25,190 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.025528600578338e-06, best pos: [-0.58270802  0.9277463   0.00998518  0.43008369  0.30896132 -0.73517282
 -0.40101258 -0.68479959 -0.90294351  0.25161154 -0.22848414  0.1149243
 -0.60409779  0.70413092 -0.16484301 -0.81758905  0.57607402  0.28376505]
2022-06-10 14:46:40,766 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:46:42,099 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 4.388794282470215e-05, best pos: [ 0.11439658  0.46351189  0.84836236  0.07457049 -0.40614701  0.3929158
  0.73969179  0.74054079  0.82515347 -0.43270811 -0.62441564 -0.10314304
  0.27216485  0.75843111  0.71345296  0.74803262  0.69313928  0.94566453]
2022-06-10 14:46:57,441 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:46:58,724 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.3983433302356667e-07, best pos: [-0.18575562 -0.48001675 -0.0148444   0.07918908  0.78691864  0.88681144
  0.02624132 -0.35775298  0.39533254 -0.22115397 -0.01287331 -0.0764075
  0.59478073 -0.03421348 -0.28693195  0.21582525  0.75341852  0.44810795]
2022-06-10 14:47:06,390 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:47:07,722 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.899884586092048e-05, best pos: [ 0.03931088  0.37414868  0.54939054  0.37530502 -0.90191053  0.60347898
 -0.09656804  0.11418689  0.66734773  0.95275874 -0.61458454  0.16851145
 -0.74777338  0.27055112 -0.37626267  0.56273983  0.40419002  0.29466931]
2022-06-10 14:47:36,637 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:47:38,012 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.94206830760773e-06, best pos: [-0.22299886 -0.5419175   0.96838747 -0.32605758  0.59028428 -0.72399388
  0.73705542 -0.88000206 -0.7496791   0.96410031  0.07954619 -0.34858967
  0.87549756  0.97185108 -0.62495319  0.54132191 -0.5456319  -0.46257532]
2022-06-10 14:48:22,131 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:48:23,494 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.3065397114954569e-05, best pos: [-0.28570605 -0.21513758  0.56385266 -0.81207516 -0.08428956  0.389277
 -0.29905318  0.5887046  -0.5344182   0.22775435 -0.148618    0.16085679
 -0.67654512  0.54112963  0.71674825  0.09067723  0.52713668 -0.27471809]
2022-06-10 14:48:38,348 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:48:39,724 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.79096848214542e-07, best pos: [-0.3116779   0.62733662 -0.34173958 -0.53324745  0.50815791 -0.41428356
  0.01779607 -0.82714902 -0.98633205  0.35709266  0.77981714 -0.01436626
 -0.69305648 -0.50192917  0.81097213 -0.68520187  0.11974303 -0.84412793]
2022-06-10 14:50:41,593 - pyswarms.single.global_best - INFO - Optimize for 4000 iters with {'c1': 2, 'c2': 2, 'w': 1}
2022-06-10 14:50:42,904 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 4.8120001179666104e-06, best pos: [ 0.81226508 -0.21451793 -0.00451562  0.75864095  0.94596349 -0.49117279
 -0.59505386 -0.73786395 -0.51709938 -0.56774663  0.28328911 -0.39370691
  0.99162518 -0.24556782  0.66443851  0.91205176 -0.48199422 -0.05541703]
2022-06-11 17:24:59,363 - shap - WARNING - Using 103904 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 17:26:35,645 - shap - INFO - num_full_subsets = 1
2022-06-11 17:26:35,663 - shap - INFO - remaining_weight_vector = [0.19176421 0.13316959 0.10421968 0.08716555 0.07609691 0.06848722
 0.06308033 0.05918649 0.05640124 0.05447847 0.05326784 0.05268248]
2022-06-11 17:26:35,663 - shap - INFO - num_paired_subset_sizes = 13
2022-06-11 17:27:35,329 - shap - INFO - weight_left = 0.730579019691897
2022-06-11 17:32:06,836 - shap - WARNING - Using 103904 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 17:32:20,723 - shap - INFO - num_full_subsets = 2
2022-06-11 17:32:20,724 - shap - INFO - remaining_weight_vector = [0.20732477 0.16660026 0.14353254 0.12957798 0.12116383 0.11662019
 0.11518043]
2022-06-11 17:32:20,724 - shap - INFO - num_paired_subset_sizes = 8
2022-06-11 17:32:20,755 - shap - INFO - weight_left = 0.528623703595323
2022-06-11 17:32:22,356 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 17:32:22,357 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-06-11 17:32:22,382 - shap - INFO - phi = [-0.12687609  0.00420521  0.02587825  0.          0.01877822 -0.00526675
 -0.01529661  0.01099611 -0.03266149  0.00518088  0.01507057  0.01006302
  0.0234071   0.00442223  0.01134041  0.          0.          0.0018006 ]
2022-06-11 17:32:22,382 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 17:32:22,383 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-06-11 17:32:22,388 - shap - INFO - phi = [ 0.12687609 -0.00420521 -0.02587825  0.         -0.01877822  0.00526675
  0.01529661 -0.01099611  0.03266149 -0.00518088 -0.01507057 -0.01006302
 -0.0234071  -0.00442223 -0.01134041  0.          0.         -0.0018006 ]
2022-06-11 17:34:03,140 - shap - INFO - num_full_subsets = 2
2022-06-11 17:34:03,141 - shap - INFO - remaining_weight_vector = [0.20732477 0.16660026 0.14353254 0.12957798 0.12116383 0.11662019
 0.11518043]
2022-06-11 17:34:03,141 - shap - INFO - num_paired_subset_sizes = 8
2022-06-11 17:34:03,168 - shap - INFO - weight_left = 0.528623703595323
2022-06-11 17:34:04,477 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 17:34:04,478 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-06-11 17:34:04,487 - shap - INFO - phi = [-0.16017988  0.030021    0.05193817  0.00900711  0.02429225  0.
 -0.0042906  -0.00290822  0.04702057  0.01029605 -0.03886534 -0.00434796
 -0.00450462 -0.02195768  0.          0.          0.          0.        ]
2022-06-11 17:34:04,487 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 17:34:04,487 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-06-11 17:34:04,491 - shap - INFO - phi = [ 0.16017988 -0.030021   -0.05193817 -0.00900711 -0.02429225  0.
  0.0042906   0.00290822 -0.04702057 -0.01029605  0.03886534  0.00434796
  0.00450462  0.02195768  0.          0.          0.          0.        ]
2022-06-11 17:39:28,186 - shap - INFO - num_full_subsets = 2
2022-06-11 17:39:28,186 - shap - INFO - remaining_weight_vector = [0.20732477 0.16660026 0.14353254 0.12957798 0.12116383 0.11662019
 0.11518043]
2022-06-11 17:39:28,186 - shap - INFO - num_paired_subset_sizes = 8
2022-06-11 17:39:28,211 - shap - INFO - weight_left = 0.528623703595323
2022-06-11 17:39:29,531 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 17:39:29,531 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-06-11 17:39:29,538 - shap - INFO - phi = [-0.09925949 -0.00966293 -0.03786013 -0.05258769  0.00589897  0.
 -0.00241876  0.0076001   0.02655333 -0.00195827 -0.05925456 -0.02187557
  0.03101731  0.01929073  0.00475997  0.          0.         -0.00138883]
2022-06-11 17:39:29,538 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 17:39:29,538 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-06-11 17:39:29,543 - shap - INFO - phi = [ 0.09925949  0.00966293  0.03786013  0.05258769 -0.00589897  0.
  0.00241876 -0.0076001  -0.02655333  0.00195827  0.05925456  0.02187557
 -0.03101731 -0.01929073 -0.00475997  0.          0.          0.00138883]
2022-06-11 17:40:21,853 - shap - WARNING - Using 103904 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 17:42:13,860 - shap - INFO - num_full_subsets = 1
2022-06-11 17:42:13,991 - shap - INFO - remaining_weight_vector = [0.19176421 0.13316959 0.10421968 0.08716555 0.07609691 0.06848722
 0.06308033 0.05918649 0.05640124 0.05447847 0.05326784 0.05268248]
2022-06-11 17:42:13,991 - shap - INFO - num_paired_subset_sizes = 13
2022-06-11 19:12:43,663 - shap - INFO - num_full_subsets = 2
2022-06-11 19:12:43,664 - shap - INFO - remaining_weight_vector = [0.20732477 0.16660026 0.14353254 0.12957798 0.12116383 0.11662019
 0.11518043]
2022-06-11 19:12:43,664 - shap - INFO - num_paired_subset_sizes = 8
2022-06-11 19:12:43,693 - shap - INFO - weight_left = 0.528623703595323
2022-06-11 19:12:45,131 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 19:12:45,131 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-06-11 19:12:45,153 - shap - INFO - phi = [-0.09769244 -0.01098492 -0.00462474  0.02319436 -0.01308649 -0.01359081
 -0.02747851  0.00501917  0.08296988 -0.00814601  0.00710772 -0.00164753
  0.05911414 -0.0064832   0.00237105  0.          0.          0.        ]
2022-06-11 19:12:45,154 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 19:12:45,154 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-06-11 19:12:45,159 - shap - INFO - phi = [ 0.09769244  0.01098492  0.00462474 -0.02319436  0.01308649  0.01359081
  0.02747851 -0.00501917 -0.08296988  0.00814601 -0.00710772  0.00164753
 -0.05911414  0.0064832  -0.00237105  0.          0.          0.        ]
2022-06-11 19:13:31,402 - shap - INFO - num_full_subsets = 2
2022-06-11 19:13:31,402 - shap - INFO - remaining_weight_vector = [0.20732477 0.16660026 0.14353254 0.12957798 0.12116383 0.11662019
 0.11518043]
2022-06-11 19:13:31,402 - shap - INFO - num_paired_subset_sizes = 8
2022-06-11 19:13:31,428 - shap - INFO - weight_left = 0.528623703595323
2022-06-11 19:13:32,777 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 19:13:32,777 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-06-11 19:13:32,787 - shap - INFO - phi = [ 0.26407873  0.          0.01256888  0.04292852 -0.00983021 -0.00845856
 -0.00969366  0.          0.00986761  0.          0.          0.01368171
  0.          0.01111901 -0.12844955  0.          0.          0.        ]
2022-06-11 19:13:32,787 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 19:13:32,788 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-06-11 19:13:32,792 - shap - INFO - phi = [-0.26407873  0.         -0.01256888 -0.04292852  0.00983021  0.00845856
  0.00969366  0.         -0.00986761  0.          0.         -0.01368171
  0.         -0.01111901  0.12844955  0.          0.          0.        ]
2022-06-11 19:13:53,254 - shap - INFO - num_full_subsets = 2
2022-06-11 19:13:53,255 - shap - INFO - remaining_weight_vector = [0.20732477 0.16660026 0.14353254 0.12957798 0.12116383 0.11662019
 0.11518043]
2022-06-11 19:13:53,255 - shap - INFO - num_paired_subset_sizes = 8
2022-06-11 19:13:53,281 - shap - INFO - weight_left = 0.528623703595323
2022-06-11 19:13:54,679 - shap - INFO - np.sum(w_aug) = 17.999999999999996
2022-06-11 19:13:54,680 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999997
2022-06-11 19:13:54,686 - shap - INFO - phi = [-0.0183964  -0.0348939  -0.01553506 -0.0226117  -0.04010868 -0.0212743
 -0.00378242 -0.00834089 -0.02360398 -0.00529887 -0.00666101 -0.00377529
  0.02907181  0.01087697 -0.01438832  0.          0.         -0.00159046]
2022-06-11 19:13:54,687 - shap - INFO - np.sum(w_aug) = 17.999999999999996
2022-06-11 19:13:54,687 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999997
2022-06-11 19:13:54,691 - shap - INFO - phi = [ 0.0183964   0.0348939   0.01553506  0.0226117   0.04010868  0.0212743
  0.00378242  0.00834089  0.02360398  0.00529887  0.00666101  0.00377529
 -0.02907181 -0.01087697  0.01438832  0.          0.          0.00159046]
2022-06-11 19:15:30,843 - shap - INFO - num_full_subsets = 2
2022-06-11 19:15:30,844 - shap - INFO - remaining_weight_vector = [0.20732477 0.16660026 0.14353254 0.12957798 0.12116383 0.11662019
 0.11518043]
2022-06-11 19:15:30,844 - shap - INFO - num_paired_subset_sizes = 8
2022-06-11 19:15:30,870 - shap - INFO - weight_left = 0.528623703595323
2022-06-11 19:15:32,275 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 19:15:32,275 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999997
2022-06-11 19:15:32,281 - shap - INFO - phi = [-0.04301204 -0.02300559 -0.01544776 -0.00620157 -0.01789006 -0.01135205
 -0.01248439 -0.0050691  -0.0451043  -0.00369424  0.05802433  0.02137587
  0.01721239  0.03268991  0.00479195  0.          0.          0.        ]
2022-06-11 19:15:32,282 - shap - INFO - np.sum(w_aug) = 18.0
2022-06-11 19:15:32,282 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999997
2022-06-11 19:15:32,287 - shap - INFO - phi = [ 0.04301204  0.02300559  0.01544776  0.00620157  0.01789006  0.01135205
  0.01248439  0.0050691   0.0451043   0.00369424 -0.05802433 -0.02137587
 -0.01721239 -0.03268991 -0.00479195  0.          0.          0.        ]
2022-06-11 19:15:38,346 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:15:38,659 - shap - INFO - num_full_subsets = 1
2022-06-11 19:15:38,659 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:15:38,659 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:15:38,715 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:15:44,810 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:15:44,810 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:15:44,823 - shap - INFO - phi = [-0.01548258 -0.0204248  -0.02035217 -0.02265116 -0.0022997  -0.00516655
 -0.02639929 -0.0568221   0.         -0.00122858 -0.00683792  0.
 -0.00762172 -0.02193593  0.          0.         -0.00651986  0.
 -0.00225005  0.         -0.08296595 -0.02175752 -0.09772183 -0.08852272
 -0.01547618 -0.00684515 -0.04090116 -0.0719375  -0.00603237 -0.00485191]
2022-06-11 19:15:44,824 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:15:44,824 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:15:44,832 - shap - INFO - phi = [0.01548258 0.0204248  0.02035217 0.02265116 0.0022997  0.00516655
 0.02639929 0.0568221  0.         0.00122858 0.00683792 0.
 0.00762172 0.02193593 0.         0.         0.00651986 0.
 0.00225005 0.         0.08296595 0.02175752 0.09772183 0.08852272
 0.01547618 0.00684515 0.04090116 0.0719375  0.00603237 0.00485191]
2022-06-11 19:16:53,919 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:16:54,231 - shap - INFO - num_full_subsets = 1
2022-06-11 19:16:54,231 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:16:54,232 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:16:54,289 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:17:00,479 - shap - INFO - np.sum(w_aug) = 30.000000000000014
2022-06-11 19:17:00,480 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:17:00,489 - shap - INFO - phi = [0.00097683 0.02722001 0.01153529 0.01935147 0.00452748 0.00447987
 0.01817945 0.02068757 0.00154577 0.00116852 0.00999359 0.
 0.00488714 0.01913322 0.00262533 0.         0.         0.
 0.         0.         0.0570125  0.02209873 0.04922391 0.0460007
 0.00750776 0.00400183 0.00675132 0.0410865  0.00400381 0.00449905]
2022-06-11 19:17:00,489 - shap - INFO - np.sum(w_aug) = 30.000000000000014
2022-06-11 19:17:00,489 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:17:00,497 - shap - INFO - phi = [-0.00097683 -0.02722001 -0.01153529 -0.01935147 -0.00452748 -0.00447987
 -0.01817945 -0.02068757 -0.00154577 -0.00116852 -0.00999359  0.
 -0.00488714 -0.01913322 -0.00262533  0.          0.          0.
  0.          0.         -0.0570125  -0.02209873 -0.04922391 -0.0460007
 -0.00750776 -0.00400183 -0.00675132 -0.0410865  -0.00400381 -0.00449905]
2022-06-11 19:18:02,491 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:18:02,811 - shap - INFO - num_full_subsets = 1
2022-06-11 19:18:02,811 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:18:02,811 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:18:02,869 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:18:08,902 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:18:08,902 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:18:08,912 - shap - INFO - phi = [-0.02020465 -0.02027597 -0.0187609  -0.03012541  0.         -0.00087177
 -0.03081757 -0.04904204  0.          0.         -0.00967258  0.
 -0.01204972 -0.02335274 -0.00175989  0.          0.          0.
 -0.00084398  0.02660863 -0.0907987  -0.02401817 -0.10761263 -0.0911515
  0.         -0.00323776 -0.02686083 -0.04858576 -0.005721    0.        ]
2022-06-11 19:18:08,913 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:18:08,913 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:18:08,922 - shap - INFO - phi = [ 0.02020465  0.02027597  0.0187609   0.03012541  0.          0.00087177
  0.03081757  0.04904204  0.          0.          0.00967258  0.
  0.01204972  0.02335274  0.00175989  0.          0.          0.
  0.00084398 -0.02660863  0.0907987   0.02401817  0.10761263  0.0911515
  0.          0.00323776  0.02686083  0.04858576  0.005721    0.        ]
2022-06-11 19:18:46,281 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:18:46,592 - shap - INFO - num_full_subsets = 1
2022-06-11 19:18:46,592 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:18:46,592 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:18:46,651 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:18:52,865 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:18:52,865 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:18:52,875 - shap - INFO - phi = [0.00075444 0.01916696 0.00772518 0.00716557 0.         0.00490132
 0.01346809 0.02389717 0.         0.0024737  0.00359446 0.
 0.00737463 0.01618022 0.00063716 0.00067163 0.         0.00296778
 0.         0.00173574 0.06095316 0.01389721 0.05921974 0.04893779
 0.         0.00254555 0.02038163 0.04271473 0.00445885 0.00154819]
2022-06-11 19:18:52,876 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:18:52,876 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:18:52,883 - shap - INFO - phi = [-0.00075444 -0.01916696 -0.00772518 -0.00716557  0.         -0.00490132
 -0.01346809 -0.02389717  0.         -0.0024737  -0.00359446  0.
 -0.00737463 -0.01618022 -0.00063716 -0.00067163  0.         -0.00296778
  0.         -0.00173574 -0.06095316 -0.01389721 -0.05921974 -0.04893779
  0.         -0.00254555 -0.02038163 -0.04271473 -0.00445885 -0.00154819]
2022-06-11 19:24:36,634 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:24:36,944 - shap - INFO - num_full_subsets = 1
2022-06-11 19:24:36,944 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:24:36,944 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:24:37,002 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:24:43,214 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:24:43,214 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:24:43,223 - shap - INFO - phi = [0.01059615 0.01433641 0.02199144 0.00785594 0.         0.
 0.00095859 0.03189768 0.         0.         0.00520086 0.
 0.00135969 0.00771422 0.         0.00362936 0.00108543 0.
 0.00396841 0.         0.05939724 0.02399534 0.04575032 0.04673855
 0.00699052 0.00296305 0.02402033 0.03922896 0.00553276 0.        ]
2022-06-11 19:24:43,224 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:24:43,224 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:24:43,231 - shap - INFO - phi = [-0.01059615 -0.01433641 -0.02199144 -0.00785594  0.          0.
 -0.00095859 -0.03189768  0.          0.         -0.00520086  0.
 -0.00135969 -0.00771422  0.         -0.00362936 -0.00108543  0.
 -0.00396841  0.         -0.05939724 -0.02399534 -0.04575032 -0.04673855
 -0.00699052 -0.00296305 -0.02402033 -0.03922896 -0.00553276  0.        ]
2022-06-11 19:25:48,593 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:25:48,898 - shap - INFO - num_full_subsets = 1
2022-06-11 19:25:48,898 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:25:48,898 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:25:48,956 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:25:55,093 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:25:55,093 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:25:55,103 - shap - INFO - phi = [ 0.         -0.00621695 -0.01083637  0.          0.          0.
 -0.03611158 -0.04002372  0.          0.          0.01263748  0.
  0.02449823  0.          0.          0.          0.          0.
  0.          0.         -0.0836574  -0.02167802 -0.06296283 -0.06659099
 -0.01910371 -0.02086871 -0.04815978 -0.12534912 -0.02843222 -0.00336497]
2022-06-11 19:25:55,104 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:25:55,104 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:25:55,113 - shap - INFO - phi = [ 0.          0.00621695  0.01083637  0.          0.          0.
  0.03611158  0.04002372  0.          0.         -0.01263748  0.
 -0.02449823  0.          0.          0.          0.          0.
  0.          0.          0.0836574   0.02167802  0.06296283  0.06659099
  0.01910371  0.02086871  0.04815978  0.12534912  0.02843222  0.00336497]
2022-06-11 19:28:58,660 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:28:58,967 - shap - INFO - num_full_subsets = 1
2022-06-11 19:28:58,967 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:28:58,968 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:28:59,024 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:29:05,344 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:29:05,344 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:29:05,353 - shap - INFO - phi = [ 0.00714547  0.00447747  0.0079578   0.00229753  0.00955858  0.
  0.0190677   0.03898425  0.          0.          0.00859575  0.
  0.          0.02061678 -0.01676111  0.          0.00280882  0.0040538
  0.0021247   0.          0.04098472  0.0136491   0.03437931  0.06612507
  0.01574542  0.00162944  0.02900042  0.03482548 -0.01872188  0.        ]
2022-06-11 19:29:05,354 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:29:05,354 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:29:05,363 - shap - INFO - phi = [-0.00714547 -0.00447747 -0.0079578  -0.00229753 -0.00955858  0.
 -0.0190677  -0.03898425  0.          0.         -0.00859575  0.
  0.         -0.02061678  0.01676111  0.         -0.00280882 -0.0040538
 -0.0021247   0.         -0.04098472 -0.0136491  -0.03437931 -0.06612507
 -0.01574542 -0.00162944 -0.02900042 -0.03482548  0.01872188  0.        ]
2022-06-11 19:36:51,982 - interpret.provider.visualize - INFO - Detected non-cloud environment.
2022-06-11 19:36:54,483 - interpret.visual.udash - INFO - Generating mini dash
2022-06-11 19:36:54,492 - interpret.visual.udash - INFO - Generated mini dash
2022-06-11 19:38:43,095 - interpret.provider.visualize - INFO - Detected non-cloud environment.
2022-06-11 19:38:45,518 - interpret.visual.interactive - ERROR - 'NoneType' object has no attribute 'selector'
Traceback (most recent call last):
  File "C:\Users\ASUS\miniconda3\lib\site-packages\interpret\visual\interactive.py", line 169, in show
    this.visualize_provider.render(explanation, key=key, **kwargs)
  File "C:\Users\ASUS\miniconda3\lib\site-packages\interpret\provider\visualize.py", line 63, in render
    self.provider.render(explanation, key=key, **kwargs)
  File "C:\Users\ASUS\miniconda3\lib\site-packages\interpret\provider\visualize.py", line 201, in render
    self.app_runner.register(explanation, share_tables=share_tables)
  File "C:\Users\ASUS\miniconda3\lib\site-packages\interpret\visual\dashboard.py", line 165, in register
    self.app.register(ctx, **kwargs)
  File "C:\Users\ASUS\miniconda3\lib\site-packages\interpret\visual\dashboard.py", line 236, in register
    app = udash.generate_app(
  File "C:\Users\ASUS\miniconda3\lib\site-packages\interpret\visual\udash.py", line 894, in generate_app
    new_item = _expand_ctx_item(ctx)
  File "C:\Users\ASUS\miniconda3\lib\site-packages\interpret\visual\udash.py", line 872, in _expand_ctx_item
    selector = explanation.selector
AttributeError: 'NoneType' object has no attribute 'selector'
2022-06-11 19:40:05,177 - interpret.provider.visualize - INFO - Detected non-cloud environment.
2022-06-11 19:40:07,626 - interpret.visual.udash - INFO - Generating mini dash
2022-06-11 19:40:07,641 - interpret.visual.udash - INFO - Generated mini dash
2022-06-11 19:42:31,597 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:42:31,904 - shap - INFO - num_full_subsets = 1
2022-06-11 19:42:31,904 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:42:31,904 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:42:31,961 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:42:38,487 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:42:38,487 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:42:38,501 - shap - INFO - phi = [0.01344971 0.         0.01391368 0.01732511 0.00199649 0.
 0.01392082 0.03714027 0.         0.         0.00336662 0.
 0.         0.00686227 0.         0.         0.         0.
 0.00325774 0.00111365 0.05718131 0.         0.05725291 0.04745065
 0.00448875 0.         0.02229936 0.05842751 0.00414472 0.        ]
2022-06-11 19:42:38,502 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:42:38,502 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:42:38,515 - shap - INFO - phi = [-0.01344971  0.         -0.01391368 -0.01732511 -0.00199649  0.
 -0.01392082 -0.03714027  0.          0.         -0.00336662  0.
  0.         -0.00686227  0.          0.          0.          0.
 -0.00325774 -0.00111365 -0.05718131  0.         -0.05725291 -0.04745065
 -0.00448875  0.         -0.02229936 -0.05842751 -0.00414472  0.        ]
2022-06-11 19:43:58,379 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:43:58,685 - shap - INFO - num_full_subsets = 1
2022-06-11 19:43:58,685 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:43:58,685 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:43:58,742 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:44:04,941 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:44:04,942 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:44:04,950 - shap - INFO - phi = [-0.00409599 -0.02631525 -0.03483943 -0.03559787  0.          0.
  0.04810737  0.03144871  0.          0.         -0.00659501  0.
  0.         -0.02909673 -0.00385479 -0.00503307  0.          0.
  0.          0.01160411 -0.09046906 -0.01988957 -0.08081702 -0.09856833
  0.          0.0062909   0.02734647  0.04491947  0.0092814   0.        ]
2022-06-11 19:44:04,951 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:44:04,951 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:44:04,960 - shap - INFO - phi = [ 0.00409599  0.02631525  0.03483943  0.03559787  0.          0.
 -0.04810737 -0.03144871  0.          0.          0.00659501  0.
  0.          0.02909673  0.00385479  0.00503307  0.          0.
  0.         -0.01160411  0.09046906  0.01988957  0.08081702  0.09856833
  0.         -0.0062909  -0.02734647 -0.04491947 -0.0092814   0.        ]
2022-06-11 19:48:12,324 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:48:12,639 - shap - INFO - num_full_subsets = 1
2022-06-11 19:48:12,640 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:48:12,640 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:48:12,699 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:48:19,400 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:48:19,400 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:48:19,409 - shap - INFO - phi = [1.09133833e-02 3.81711567e-03 4.19427522e-03 1.51391803e-02
 0.00000000e+00 2.09049259e-03 1.86096311e-02 3.16112421e-02
 0.00000000e+00 1.37332666e-05 8.65699201e-03 0.00000000e+00
 1.07544071e-03 2.51464780e-02 0.00000000e+00 4.29907356e-03
 0.00000000e+00 0.00000000e+00 0.00000000e+00 5.71900535e-03
 5.10547423e-02 0.00000000e+00 5.94675452e-02 5.16367798e-02
 0.00000000e+00 4.53879988e-03 0.00000000e+00 3.72273571e-02
 0.00000000e+00 0.00000000e+00]
2022-06-11 19:48:19,409 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:48:19,409 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:48:19,417 - shap - INFO - phi = [-1.09133833e-02 -3.81711567e-03 -4.19427522e-03 -1.51391803e-02
  0.00000000e+00 -2.09049259e-03 -1.86096311e-02 -3.16112421e-02
  0.00000000e+00 -1.37332666e-05 -8.65699201e-03  0.00000000e+00
 -1.07544071e-03 -2.51464780e-02  0.00000000e+00 -4.29907356e-03
  0.00000000e+00  0.00000000e+00  0.00000000e+00 -5.71900535e-03
 -5.10547423e-02  0.00000000e+00 -5.94675452e-02 -5.16367798e-02
  0.00000000e+00 -4.53879988e-03  0.00000000e+00 -3.72273571e-02
  0.00000000e+00  0.00000000e+00]
2022-06-11 19:48:53,798 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:48:54,111 - shap - INFO - num_full_subsets = 1
2022-06-11 19:48:54,112 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:48:54,112 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:48:54,169 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:49:00,541 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:49:00,542 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:49:00,551 - shap - INFO - phi = [0.0103427  0.         0.00471659 0.01163641 0.00115456 0.00327985
 0.02018397 0.03543608 0.         0.         0.00290931 0.
 0.         0.00980686 0.         0.         0.0019992  0.
 0.         0.         0.05274525 0.         0.06781933 0.0441233
 0.00898602 0.00145875 0.03813283 0.04547605 0.00305585 0.        ]
2022-06-11 19:49:00,551 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:49:00,552 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:49:00,562 - shap - INFO - phi = [-0.0103427   0.         -0.00471659 -0.01163641 -0.00115456 -0.00327985
 -0.02018397 -0.03543608  0.          0.         -0.00290931  0.
  0.         -0.00980686  0.          0.         -0.0019992   0.
  0.          0.         -0.05274525  0.         -0.06781933 -0.0441233
 -0.00898602 -0.00145875 -0.03813283 -0.04547605 -0.00305585  0.        ]
2022-06-11 19:49:26,929 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:49:27,239 - shap - INFO - num_full_subsets = 1
2022-06-11 19:49:27,239 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:49:27,239 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:49:27,297 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:49:33,574 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:49:33,574 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:49:33,583 - shap - INFO - phi = [-0.02216008 -0.02828238 -0.00480998 -0.02940669  0.          0.
 -0.01102662 -0.02656062  0.         -0.00183308 -0.00928816  0.
 -0.0033682  -0.02234511  0.          0.         -0.00269493  0.
  0.         -0.00069984 -0.08830422 -0.03201516 -0.08760968 -0.10445477
  0.         -0.00380924 -0.02479783 -0.01822357  0.          0.        ]
2022-06-11 19:49:33,584 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:49:33,584 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:49:33,591 - shap - INFO - phi = [0.02216008 0.02828238 0.00480998 0.02940669 0.         0.
 0.01102662 0.02656062 0.         0.00183308 0.00928816 0.
 0.0033682  0.02234511 0.         0.         0.00269493 0.
 0.         0.00069984 0.08830422 0.03201516 0.08760968 0.10445477
 0.         0.00380924 0.02479783 0.01822357 0.         0.        ]
2022-06-11 19:50:40,230 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:50:40,545 - shap - INFO - num_full_subsets = 1
2022-06-11 19:50:40,545 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:50:40,545 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:50:40,604 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:50:46,740 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:50:46,741 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:50:46,750 - shap - INFO - phi = [0.00255401 0.         0.00387461 0.00464289 0.003199   0.
 0.01022388 0.03455351 0.00126631 0.00083357 0.0015533  0.
 0.00376989 0.0043248  0.         0.         0.00143035 0.
 0.00068483 0.         0.0331108  0.00110429 0.06712178 0.06822034
 0.00709205 0.00563631 0.02456101 0.0476798  0.00372475 0.00207735]
2022-06-11 19:50:46,750 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:50:46,750 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:50:46,758 - shap - INFO - phi = [-0.00255401  0.         -0.00387461 -0.00464289 -0.003199    0.
 -0.01022388 -0.03455351 -0.00126631 -0.00083357 -0.0015533   0.
 -0.00376989 -0.0043248   0.          0.         -0.00143035  0.
 -0.00068483  0.         -0.0331108  -0.00110429 -0.06712178 -0.06822034
 -0.00709205 -0.00563631 -0.02456101 -0.0476798  -0.00372475 -0.00207735]
2022-06-11 19:51:18,150 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:51:18,469 - shap - INFO - num_full_subsets = 1
2022-06-11 19:51:18,469 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:51:18,469 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:51:18,531 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:51:24,795 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:51:24,796 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:51:24,805 - shap - INFO - phi = [-0.01520276 -0.01648558 -0.0187724  -0.01824222  0.          0.
 -0.04515157 -0.04761518  0.         -0.00608286 -0.00653593  0.
 -0.0034751  -0.02435747  0.          0.         -0.00133176  0.
  0.          0.         -0.08697719 -0.02508676 -0.05630691 -0.07322822
 -0.00997883 -0.01163495 -0.03430913 -0.09030501  0.          0.        ]
2022-06-11 19:51:24,806 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:51:24,806 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-11 19:51:24,813 - shap - INFO - phi = [0.01520276 0.01648558 0.0187724  0.01824222 0.         0.
 0.04515157 0.04761518 0.         0.00608286 0.00653593 0.
 0.0034751  0.02435747 0.         0.         0.00133176 0.
 0.         0.         0.08697719 0.02508676 0.05630691 0.07322822
 0.00997883 0.01163495 0.03430913 0.09030501 0.         0.        ]
2022-06-11 19:52:06,850 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:52:07,161 - shap - INFO - num_full_subsets = 1
2022-06-11 19:52:07,161 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:52:07,161 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:52:07,219 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:52:13,403 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:52:13,403 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:52:13,412 - shap - INFO - phi = [0.00193407 0.01054455 0.01012692 0.0121434  0.         0.00097908
 0.01753106 0.02898029 0.01032607 0.00158162 0.00118863 0.
 0.00100002 0.0105896  0.         0.         0.         0.
 0.00094206 0.         0.05424193 0.01738743 0.04319659 0.05007607
 0.00797076 0.00876425 0.0348386  0.04135471 0.00557279 0.00180461]
2022-06-11 19:52:13,413 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:52:13,413 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:52:13,420 - shap - INFO - phi = [-0.00193407 -0.01054455 -0.01012692 -0.0121434   0.         -0.00097908
 -0.01753106 -0.02898029 -0.01032607 -0.00158162 -0.00118863  0.
 -0.00100002 -0.0105896   0.          0.          0.          0.
 -0.00094206  0.         -0.05424193 -0.01738743 -0.04319659 -0.05007607
 -0.00797076 -0.00876425 -0.0348386  -0.04135471 -0.00557279 -0.00180461]
2022-06-11 19:52:59,988 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:53:00,304 - shap - INFO - num_full_subsets = 1
2022-06-11 19:53:00,304 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:53:00,304 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:53:00,364 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:53:06,414 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:53:06,414 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:53:06,424 - shap - INFO - phi = [-0.03375063  0.         -0.04287599 -0.04307985  0.          0.
  0.          0.          0.          0.         -0.0077421   0.
  0.         -0.0133372   0.          0.          0.          0.
  0.          0.         -0.13261551 -0.00288915 -0.09161713 -0.15927554
  0.          0.          0.          0.          0.          0.        ]
2022-06-11 19:53:06,425 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:53:06,425 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:53:06,433 - shap - INFO - phi = [0.03375063 0.         0.04287599 0.04307985 0.         0.
 0.         0.         0.         0.         0.0077421  0.
 0.         0.0133372  0.         0.         0.         0.
 0.         0.         0.13261551 0.00288915 0.09161713 0.15927554
 0.         0.         0.         0.         0.         0.        ]
2022-06-11 19:53:33,632 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:53:33,949 - shap - INFO - num_full_subsets = 1
2022-06-11 19:53:33,949 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:53:33,949 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:53:34,007 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:53:40,409 - shap - INFO - np.sum(w_aug) = 30.000000000000004
2022-06-11 19:53:40,409 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:53:40,419 - shap - INFO - phi = [ 0.00716452  0.0039672   0.01196997  0.01562384  0.01079886  0.0033137
 -0.03388499  0.03652566  0.          0.          0.          0.
  0.          0.00872546  0.00110768  0.0041432   0.00771212  0.
  0.00114175  0.          0.04120355  0.01279552  0.02957416  0.05693526
  0.01374192  0.00331028  0.          0.05333224  0.          0.        ]
2022-06-11 19:53:40,419 - shap - INFO - np.sum(w_aug) = 30.000000000000004
2022-06-11 19:53:40,420 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:53:40,427 - shap - INFO - phi = [-0.00716452 -0.0039672  -0.01196997 -0.01562384 -0.01079886 -0.0033137
  0.03388499 -0.03652566  0.          0.          0.          0.
  0.         -0.00872546 -0.00110768 -0.0041432  -0.00771212  0.
 -0.00114175  0.         -0.04120355 -0.01279552 -0.02957416 -0.05693526
 -0.01374192 -0.00331028  0.         -0.05333224  0.          0.        ]
2022-06-11 19:55:04,979 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:55:05,291 - shap - INFO - num_full_subsets = 1
2022-06-11 19:55:05,291 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:55:05,291 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:55:05,351 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:55:11,578 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:55:11,578 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:55:11,587 - shap - INFO - phi = [0.01327493 0.00387266 0.01284051 0.01084708 0.         0.
 0.01762882 0.04271498 0.         0.         0.00202319 0.
 0.00431855 0.02096498 0.         0.         0.         0.
 0.00222036 0.         0.04348541 0.00847025 0.04775708 0.05121123
 0.00479928 0.0079372  0.03108988 0.04768824 0.00467227 0.        ]
2022-06-11 19:55:11,588 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-11 19:55:11,588 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:55:11,595 - shap - INFO - phi = [-0.01327493 -0.00387266 -0.01284051 -0.01084708  0.          0.
 -0.01762882 -0.04271498  0.          0.         -0.00202319  0.
 -0.00431855 -0.02096498  0.          0.          0.          0.
 -0.00222036  0.         -0.04348541 -0.00847025 -0.04775708 -0.05121123
 -0.00479928 -0.0079372  -0.03108988 -0.04768824 -0.00467227  0.        ]
2022-06-11 19:57:12,853 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:57:13,162 - shap - INFO - num_full_subsets = 1
2022-06-11 19:57:13,163 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:57:13,163 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:57:13,219 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:57:20,685 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:57:20,685 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:57:20,694 - shap - INFO - phi = [0.00647327 0.00640712 0.01806824 0.0073148  0.         0.00025265
 0.02203443 0.03181796 0.         0.00127541 0.00918176 0.
 0.00470297 0.01646945 0.         0.         0.00290219 0.
 0.00289498 0.         0.0435546  0.00491896 0.05629141 0.05528212
 0.         0.00647827 0.03412425 0.03959855 0.00303627 0.00447902]
2022-06-11 19:57:20,695 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:57:20,695 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-11 19:57:20,703 - shap - INFO - phi = [-0.00647327 -0.00640712 -0.01806824 -0.0073148   0.         -0.00025265
 -0.02203443 -0.03181796  0.         -0.00127541 -0.00918176  0.
 -0.00470297 -0.01646945  0.          0.         -0.00290219  0.
 -0.00289498  0.         -0.0435546  -0.00491896 -0.05629141 -0.05528212
  0.         -0.00647827 -0.03412425 -0.03959855 -0.00303627 -0.00447902]
2022-06-11 19:58:17,248 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:58:17,562 - shap - INFO - num_full_subsets = 1
2022-06-11 19:58:17,562 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:58:17,562 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:58:17,622 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 19:58:23,747 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:58:23,747 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:58:23,760 - shap - INFO - phi = [-0.01631267 -0.01005029 -0.01022508 -0.02152805 -0.00469854  0.
 -0.02730728 -0.05492653 -0.00469845 -0.00201097 -0.00335329 -0.00105765
 -0.00925121 -0.04210908  0.          0.         -0.00413087 -0.00123789
  0.         -0.00186549 -0.09224638 -0.01752748 -0.07349781 -0.07945203
 -0.00877884 -0.01243406 -0.04013109 -0.06884354 -0.02327183 -0.0056968 ]
2022-06-11 19:58:23,761 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 19:58:23,761 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 19:58:23,771 - shap - INFO - phi = [0.01631267 0.01005029 0.01022508 0.02152805 0.00469854 0.
 0.02730728 0.05492653 0.00469845 0.00201097 0.00335329 0.00105765
 0.00925121 0.04210908 0.         0.         0.00413087 0.00123789
 0.         0.00186549 0.09224638 0.01752748 0.07349781 0.07945203
 0.00877884 0.01243406 0.04013109 0.06884354 0.02327183 0.0056968 ]
2022-06-11 19:59:56,728 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 19:59:57,041 - shap - INFO - num_full_subsets = 1
2022-06-11 19:59:57,041 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 19:59:57,042 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 19:59:57,100 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 20:00:03,324 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 20:00:03,324 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 20:00:03,334 - shap - INFO - phi = [0.00769343 0.01736195 0.00627824 0.00550634 0.00422788 0.
 0.02125305 0.03516518 0.         0.00069869 0.00618214 0.
 0.0077008  0.01661691 0.         0.         0.         0.00077117
 0.00079607 0.         0.03873473 0.01309631 0.05065501 0.04121642
 0.00611501 0.00739392 0.02723354 0.05142055 0.00287333 0.00110322]
2022-06-11 20:00:03,335 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 20:00:03,335 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 20:00:03,342 - shap - INFO - phi = [-0.00769343 -0.01736195 -0.00627824 -0.00550634 -0.00422788  0.
 -0.02125305 -0.03516518  0.         -0.00069869 -0.00618214  0.
 -0.0077008  -0.01661691  0.          0.          0.         -0.00077117
 -0.00079607  0.         -0.03873473 -0.01309631 -0.05065501 -0.04121642
 -0.00611501 -0.00739392 -0.02723354 -0.05142055 -0.00287333 -0.00110322]
2022-06-11 20:00:37,564 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 20:00:37,874 - shap - INFO - num_full_subsets = 1
2022-06-11 20:00:37,875 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 20:00:37,875 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 20:00:37,931 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 20:00:44,101 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 20:00:44,101 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 20:00:44,110 - shap - INFO - phi = [ 0.01670654  0.00584971  0.01663838  0.01016371  0.00134083  0.
  0.02309301 -0.02230849  0.          0.00182049  0.          0.
  0.00210041  0.          0.          0.          0.0051183   0.
  0.00112359  0.00268577  0.04300726  0.00590243  0.05971575  0.02894949
 -0.01198513  0.          0.03883077  0.04412411  0.00369849  0.00304898]
2022-06-11 20:00:44,111 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 20:00:44,111 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 20:00:44,118 - shap - INFO - phi = [-0.01670654 -0.00584971 -0.01663838 -0.01016371 -0.00134083  0.
 -0.02309301  0.02230849  0.         -0.00182049  0.          0.
 -0.00210041  0.          0.          0.         -0.0051183   0.
 -0.00112359 -0.00268577 -0.04300726 -0.00590243 -0.05971575 -0.02894949
  0.01198513  0.         -0.03883077 -0.04412411 -0.00369849 -0.00304898]
2022-06-11 20:04:05,867 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-11 20:04:06,174 - shap - INFO - num_full_subsets = 1
2022-06-11 20:04:06,175 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-11 20:04:06,175 - shap - INFO - num_paired_subset_sizes = 14
2022-06-11 20:04:06,233 - shap - INFO - weight_left = 0.738876032213929
2022-06-11 20:04:12,564 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 20:04:12,564 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 20:04:12,574 - shap - INFO - phi = [0.01625296 0.00037945 0.01004619 0.01677177 0.00123323 0.
 0.01236665 0.01703794 0.         0.00232288 0.01106433 0.
 0.00515451 0.0242546  0.         0.         0.         0.00089744
 0.00102299 0.         0.04919176 0.0106992  0.03480243 0.05942534
 0.0056371  0.00550318 0.02041093 0.04361178 0.004829   0.00027682]
2022-06-11 20:04:12,575 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-11 20:04:12,576 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-11 20:04:12,585 - shap - INFO - phi = [-0.01625296 -0.00037945 -0.01004619 -0.01677177 -0.00123323  0.
 -0.01236665 -0.01703794  0.         -0.00232288 -0.01106433  0.
 -0.00515451 -0.0242546   0.          0.          0.         -0.00089744
 -0.00102299  0.         -0.04919176 -0.0106992  -0.03480243 -0.05942534
 -0.0056371  -0.00550318 -0.02041093 -0.04361178 -0.004829   -0.00027682]
2022-06-22 21:08:21,957 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-22 21:08:22,271 - shap - INFO - num_full_subsets = 1
2022-06-22 21:08:22,271 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-22 21:08:22,271 - shap - INFO - num_paired_subset_sizes = 14
2022-06-22 21:08:22,334 - shap - INFO - weight_left = 0.738876032213929
2022-06-22 21:08:28,353 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-22 21:08:28,353 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-22 21:08:28,387 - shap - INFO - phi = [0.01666192 0.01633377 0.01164233 0.02201164 0.00784766 0.00200616
 0.         0.03045417 0.         0.00098972 0.00228128 0.
 0.         0.00541167 0.         0.00149394 0.         0.
 0.         0.00069571 0.06280284 0.02276342 0.04344017 0.05650601
 0.00635397 0.00399214 0.         0.04976294 0.01044525 0.        ]
2022-06-22 21:08:28,388 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-22 21:08:28,388 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-06-22 21:08:28,395 - shap - INFO - phi = [-0.01666192 -0.01633377 -0.01164233 -0.02201164 -0.00784766 -0.00200616
  0.         -0.03045417  0.         -0.00098972 -0.00228128  0.
  0.         -0.00541167  0.         -0.00149394  0.          0.
  0.         -0.00069571 -0.06280284 -0.02276342 -0.04344017 -0.05650601
 -0.00635397 -0.00399214  0.         -0.04976294 -0.01044525  0.        ]
2022-06-22 21:09:08,861 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-22 21:09:09,169 - shap - INFO - num_full_subsets = 1
2022-06-22 21:09:09,170 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-22 21:09:09,170 - shap - INFO - num_paired_subset_sizes = 14
2022-06-22 21:09:09,232 - shap - INFO - weight_left = 0.738876032213929
2022-06-22 21:09:15,326 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-22 21:09:15,326 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-22 21:09:15,338 - shap - INFO - phi = [0.00652403 0.0098981  0.01132912 0.01472073 0.00290378 0.00171047
 0.         0.03779335 0.         0.00103396 0.00150796 0.
 0.00344275 0.02272441 0.         0.00787171 0.00664418 0.
 0.         0.         0.06383217 0.01509579 0.05741534 0.05756139
 0.01171123 0.00213686 0.         0.04331194 0.00665234 0.        ]
2022-06-22 21:09:15,339 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-06-22 21:09:15,339 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-06-22 21:09:15,346 - shap - INFO - phi = [-0.00652403 -0.0098981  -0.01132912 -0.01472073 -0.00290378 -0.00171047
  0.         -0.03779335  0.         -0.00103396 -0.00150796  0.
 -0.00344275 -0.02272441  0.         -0.00787171 -0.00664418  0.
  0.          0.         -0.06383217 -0.01509579 -0.05741534 -0.05756139
 -0.01171123 -0.00213686  0.         -0.04331194 -0.00665234  0.        ]
2022-06-22 22:02:12,642 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-22 22:02:12,940 - shap - INFO - num_full_subsets = 1
2022-06-22 22:02:12,941 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-06-22 22:02:12,941 - shap - INFO - num_paired_subset_sizes = 14
2022-06-22 22:02:12,997 - shap - INFO - weight_left = 0.738876032213929
2022-06-22 22:02:18,970 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-22 22:02:18,970 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-22 22:02:18,979 - shap - INFO - phi = [0.00920294 0.00723896 0.00517478 0.01637539 0.00126458 0.
 0.         0.03282727 0.         0.         0.00497916 0.
 0.00155464 0.01856466 0.         0.00229661 0.00113722 0.
 0.         0.00086828 0.03905031 0.01499574 0.08433879 0.05389454
 0.00375121 0.00535202 0.         0.03305316 0.00591072 0.        ]
2022-06-22 22:02:18,980 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-06-22 22:02:18,980 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-06-22 22:02:18,987 - shap - INFO - phi = [-0.00920294 -0.00723896 -0.00517478 -0.01637539 -0.00126458  0.
  0.         -0.03282727  0.          0.         -0.00497916  0.
 -0.00155464 -0.01856466  0.         -0.00229661 -0.00113722  0.
  0.         -0.00086828 -0.03905031 -0.01499574 -0.08433879 -0.05389454
 -0.00375121 -0.00535202  0.         -0.03305316 -0.00591072  0.        ]
2022-06-22 22:53:51,809 - shap - WARNING - Using 103904 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-06-22 22:55:49,625 - shap - INFO - num_full_subsets = 1
2022-06-22 22:55:49,658 - shap - INFO - remaining_weight_vector = [0.19176421 0.13316959 0.10421968 0.08716555 0.07609691 0.06848722
 0.06308033 0.05918649 0.05640124 0.05447847 0.05326784 0.05268248]
2022-06-22 22:55:49,658 - shap - INFO - num_paired_subset_sizes = 13
2022-06-22 22:56:50,578 - shap - INFO - weight_left = 0.730579019691897
2022-06-22 23:13:31,337 - shap - INFO - num_full_subsets = 2
2022-06-22 23:13:31,337 - shap - INFO - remaining_weight_vector = [0.20732477 0.16660026 0.14353254 0.12957798 0.12116383 0.11662019
 0.11518043]
2022-06-22 23:13:31,338 - shap - INFO - num_paired_subset_sizes = 8
2022-06-22 23:13:31,364 - shap - INFO - weight_left = 0.528623703595323
2022-06-22 23:13:32,706 - shap - INFO - np.sum(w_aug) = 17.999999999999996
2022-06-22 23:13:32,706 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-06-22 23:13:32,722 - shap - INFO - phi = [-0.08164967  0.06326816  0.05024367  0.02524307  0.01149735  0.00217355
 -0.00643374 -0.04011613  0.04550933  0.          0.01911918  0.01764871
  0.         -0.00727807 -0.00610041  0.          0.          0.        ]
2022-06-22 23:13:32,723 - shap - INFO - np.sum(w_aug) = 17.999999999999996
2022-06-22 23:13:32,723 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-06-22 23:13:32,727 - shap - INFO - phi = [ 0.08164967 -0.06326816 -0.05024367 -0.02524307 -0.01149735 -0.00217355
  0.00643374  0.04011613 -0.04550933  0.         -0.01911918 -0.01764871
  0.          0.00727807  0.00610041  0.          0.          0.        ]
2022-08-20 00:06:54,586 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:06:54,895 - shap - INFO - num_full_subsets = 1
2022-08-20 00:06:54,895 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:06:54,895 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:06:54,959 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:07:01,100 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:07:01,100 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:07:01,130 - shap - INFO - phi = [ 0.01675038  0.01010453  0.00700249  0.02302785  0.00308597  0.00123423
  0.          0.02187054  0.          0.          0.00662952  0.
  0.00314514  0.01481764  0.          0.01221153  0.00230029  0.
  0.          0.00451452  0.04764167  0.01992468  0.06315442  0.06018479
  0.00600335  0.00966757 -0.01457976  0.04929487  0.00684946  0.        ]
2022-08-20 00:07:01,130 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:07:01,130 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:07:01,138 - shap - INFO - phi = [-0.01675038 -0.01010453 -0.00700249 -0.02302785 -0.00308597 -0.00123423
  0.         -0.02187054  0.          0.         -0.00662952  0.
 -0.00314514 -0.01481764  0.         -0.01221153 -0.00230029  0.
  0.         -0.00451452 -0.04764167 -0.01992468 -0.06315442 -0.06018479
 -0.00600335 -0.00966757  0.01457976 -0.04929487 -0.00684946  0.        ]
2022-08-20 00:08:53,624 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:08:53,941 - shap - INFO - num_full_subsets = 1
2022-08-20 00:08:53,941 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:08:53,941 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:08:53,999 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:09:00,082 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:09:00,082 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:09:00,094 - shap - INFO - phi = [ 0.01213054  0.01151066  0.00571695  0.01081153  0.          0.00553956
  0.          0.02996224  0.          0.          0.00447104  0.00084896
  0.          0.01706574  0.          0.00703729  0.00212415  0.
 -0.01380837  0.00322205  0.05635746  0.01169055  0.04416381  0.06604659
  0.00630431  0.          0.00068485  0.04143605  0.00612069  0.        ]
2022-08-20 00:09:00,095 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:09:00,095 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:09:00,102 - shap - INFO - phi = [-0.01213054 -0.01151066 -0.00571695 -0.01081153  0.         -0.00553956
  0.         -0.02996224  0.          0.         -0.00447104 -0.00084896
  0.         -0.01706574  0.         -0.00703729 -0.00212415  0.
  0.01380837 -0.00322205 -0.05635746 -0.01169055 -0.04416381 -0.06604659
 -0.00630431  0.         -0.00068485 -0.04143605 -0.00612069  0.        ]
2022-08-20 00:09:51,902 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:09:52,211 - shap - INFO - num_full_subsets = 1
2022-08-20 00:09:52,211 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:09:52,211 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:09:52,265 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:09:58,535 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:09:58,535 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 00:09:58,544 - shap - INFO - phi = [ 0.02342424  0.00813933  0.01862601  0.0112456   0.007844    0.00192257
  0.          0.03703616  0.          0.00279259  0.00938522  0.00117124
  0.00258078  0.01522475  0.          0.01483891 -0.00010549  0.
  0.          0.00115175  0.04453443  0.00896836  0.03263403  0.04223772
  0.00903136  0.          0.          0.06933613  0.00523384  0.        ]
2022-08-20 00:09:58,545 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:09:58,545 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 00:09:58,554 - shap - INFO - phi = [-0.02342424 -0.00813933 -0.01862601 -0.0112456  -0.007844   -0.00192257
  0.         -0.03703616  0.         -0.00279259 -0.00938522 -0.00117124
 -0.00258078 -0.01522475  0.         -0.01483891  0.00010549  0.
  0.         -0.00115175 -0.04453443 -0.00896836 -0.03263403 -0.04223772
 -0.00903136  0.          0.         -0.06933613 -0.00523384  0.        ]
2022-08-20 00:11:02,895 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:11:03,199 - shap - INFO - num_full_subsets = 1
2022-08-20 00:11:03,200 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:11:03,200 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:11:03,256 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:11:09,357 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:11:09,357 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-08-20 00:11:09,366 - shap - INFO - phi = [0.00662607 0.01342181 0.01136092 0.01528134 0.00221598 0.00371465
 0.00158736 0.02110038 0.         0.00136708 0.00354236 0.
 0.00322514 0.01465133 0.         0.00191947 0.00083035 0.
 0.         0.01128298 0.04512568 0.01927691 0.04073987 0.0760341
 0.00493167 0.00981069 0.         0.04066949 0.00877264 0.        ]
2022-08-20 00:11:09,367 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:11:09,367 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-08-20 00:11:09,373 - shap - INFO - phi = [-0.00662607 -0.01342181 -0.01136092 -0.01528134 -0.00221598 -0.00371465
 -0.00158736 -0.02110038  0.         -0.00136708 -0.00354236  0.
 -0.00322514 -0.01465133  0.         -0.00191947 -0.00083035  0.
  0.         -0.01128298 -0.04512568 -0.01927691 -0.04073987 -0.0760341
 -0.00493167 -0.00981069  0.         -0.04066949 -0.00877264  0.        ]
2022-08-20 00:12:30,337 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:12:30,644 - shap - INFO - num_full_subsets = 1
2022-08-20 00:12:30,645 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:12:30,645 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:12:30,700 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:12:36,718 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:12:36,718 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:12:36,727 - shap - INFO - phi = [0.02046773 0.01147496 0.01000139 0.02847882 0.00363751 0.00306043
 0.         0.02349738 0.         0.00144395 0.00429263 0.
 0.00135242 0.01635235 0.         0.0066057  0.00181156 0.
 0.         0.00207434 0.0489923  0.01832771 0.06577463 0.04806593
 0.0069867  0.00315294 0.         0.04998218 0.00395517 0.        ]
2022-08-20 00:12:36,728 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:12:36,728 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:12:36,736 - shap - INFO - phi = [-0.02046773 -0.01147496 -0.01000139 -0.02847882 -0.00363751 -0.00306043
  0.         -0.02349738  0.         -0.00144395 -0.00429263  0.
 -0.00135242 -0.01635235  0.         -0.0066057  -0.00181156  0.
  0.         -0.00207434 -0.0489923  -0.01832771 -0.06577463 -0.04806593
 -0.0069867  -0.00315294  0.         -0.04998218 -0.00395517  0.        ]
2022-08-20 00:14:52,423 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:14:52,728 - shap - INFO - num_full_subsets = 1
2022-08-20 00:14:52,729 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:14:52,729 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:14:52,787 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:14:58,892 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:14:58,892 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-08-20 00:14:58,903 - shap - INFO - phi = [ 0.01377259  0.01307717  0.01318048  0.01968227  0.00263216  0.00384643
  0.          0.02861348  0.          0.          0.          0.
  0.          0.01086224  0.0022326   0.00502686  0.00354913  0.
  0.          0.          0.05803672  0.0116903   0.05991727  0.05465167
  0.00530421  0.00509572  0.          0.04750864  0.00577161 -0.00954545]
2022-08-20 00:14:58,904 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:14:58,904 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-08-20 00:14:58,911 - shap - INFO - phi = [-0.01377259 -0.01307717 -0.01318048 -0.01968227 -0.00263216 -0.00384643
  0.         -0.02861348  0.          0.          0.          0.
  0.         -0.01086224 -0.0022326  -0.00502686 -0.00354913  0.
  0.          0.         -0.05803672 -0.0116903  -0.05991727 -0.05465167
 -0.00530421 -0.00509572  0.         -0.04750864 -0.00577161  0.00954545]
2022-08-20 00:17:28,184 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:17:28,505 - shap - INFO - num_full_subsets = 1
2022-08-20 00:17:28,505 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:17:28,505 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:17:28,563 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:17:34,789 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:17:34,789 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:17:34,799 - shap - INFO - phi = [ 0.02385945  0.01430546  0.01116648  0.03220083  0.00512998  0.00506226
 -0.0134619   0.03260067  0.          0.00121651  0.00229248  0.
  0.          0.00888702  0.          0.01045891  0.00500599  0.
 -0.0088534   0.00683108  0.05168662  0.01631991  0.04723722  0.05213032
  0.00759437  0.0015478   0.          0.03569889  0.0066934   0.        ]
2022-08-20 00:17:34,800 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:17:34,800 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:17:34,808 - shap - INFO - phi = [-0.02385945 -0.01430546 -0.01116648 -0.03220083 -0.00512998 -0.00506226
  0.0134619  -0.03260067  0.         -0.00121651 -0.00229248  0.
  0.         -0.00888702  0.         -0.01045891 -0.00500599  0.
  0.0088534  -0.00683108 -0.05168662 -0.01631991 -0.04723722 -0.05213032
 -0.00759437 -0.0015478   0.         -0.03569889 -0.0066934   0.        ]
2022-08-20 00:17:38,989 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:17:39,311 - shap - INFO - num_full_subsets = 1
2022-08-20 00:17:39,312 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:17:39,312 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:17:39,368 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:17:45,569 - shap - INFO - np.sum(w_aug) = 30.000000000000004
2022-08-20 00:17:45,569 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:17:45,578 - shap - INFO - phi = [0.01245556 0.01231384 0.00396855 0.02212835 0.0021604  0.00143872
 0.00370697 0.02443485 0.00111936 0.00192729 0.00123593 0.
 0.00372968 0.01367065 0.         0.00543749 0.00192229 0.
 0.         0.00245018 0.05982519 0.01919718 0.04350283 0.05745351
 0.00711377 0.00344556 0.         0.06090721 0.00591    0.        ]
2022-08-20 00:17:45,579 - shap - INFO - np.sum(w_aug) = 30.000000000000004
2022-08-20 00:17:45,579 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:17:45,589 - shap - INFO - phi = [-0.01245556 -0.01231384 -0.00396855 -0.02212835 -0.0021604  -0.00143872
 -0.00370697 -0.02443485 -0.00111936 -0.00192729 -0.00123593  0.
 -0.00372968 -0.01367065  0.         -0.00543749 -0.00192229  0.
  0.         -0.00245018 -0.05982519 -0.01919718 -0.04350283 -0.05745351
 -0.00711377 -0.00344556  0.         -0.06090721 -0.00591     0.        ]
2022-08-20 00:20:13,717 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:20:14,031 - shap - INFO - num_full_subsets = 1
2022-08-20 00:20:14,031 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:20:14,031 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:20:14,089 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:20:20,170 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:20:20,170 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 00:20:20,180 - shap - INFO - phi = [ 0.00586027  0.01213268  0.01101725  0.01768038  0.00272731  0.
 -0.0106751   0.02082042  0.          0.          0.00190806  0.
  0.          0.01111243  0.          0.00800813  0.          0.
 -0.01073557  0.00380681  0.05939884  0.01798259  0.06099968  0.05824192
  0.01110319  0.          0.          0.04714713  0.00817719  0.        ]
2022-08-20 00:20:20,180 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:20:20,180 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 00:20:20,187 - shap - INFO - phi = [-0.00586027 -0.01213268 -0.01101725 -0.01768038 -0.00272731  0.
  0.0106751  -0.02082042  0.          0.         -0.00190806  0.
  0.         -0.01111243  0.         -0.00800813  0.          0.
  0.01073557 -0.00380681 -0.05939884 -0.01798259 -0.06099968 -0.05824192
 -0.01110319  0.          0.         -0.04714713 -0.00817719  0.        ]
2022-08-20 00:21:30,266 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:21:30,578 - shap - INFO - num_full_subsets = 1
2022-08-20 00:21:30,578 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:21:30,578 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:21:30,635 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:21:36,843 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:21:36,843 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 00:21:36,852 - shap - INFO - phi = [0.00881237 0.01368214 0.01068659 0.01965785 0.00321245 0.00260191
 0.         0.04095458 0.00158078 0.         0.00521465 0.
 0.00224493 0.01068135 0.         0.00711878 0.00381763 0.
 0.         0.00330506 0.06260948 0.01777593 0.04750304 0.05086077
 0.00651607 0.00272944 0.00086414 0.03969342 0.00724284 0.        ]
2022-08-20 00:21:36,853 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:21:36,853 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 00:21:36,860 - shap - INFO - phi = [-0.00881237 -0.01368214 -0.01068659 -0.01965785 -0.00321245 -0.00260191
  0.         -0.04095458 -0.00158078  0.         -0.00521465  0.
 -0.00224493 -0.01068135  0.         -0.00711878 -0.00381763  0.
  0.         -0.00330506 -0.06260948 -0.01777593 -0.04750304 -0.05086077
 -0.00651607 -0.00272944 -0.00086414 -0.03969342 -0.00724284  0.        ]
2022-08-20 00:22:01,052 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:22:01,359 - shap - INFO - num_full_subsets = 1
2022-08-20 00:22:01,359 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:22:01,359 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:22:01,415 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:22:07,461 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:22:07,461 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:22:07,472 - shap - INFO - phi = [0.01478228 0.00429622 0.00751721 0.02843197 0.00409462 0.00132762
 0.         0.05201994 0.         0.         0.0059554  0.
 0.         0.01201438 0.         0.00211835 0.00332018 0.
 0.         0.00215999 0.04456444 0.00935292 0.0538783  0.05196324
 0.00677625 0.00199338 0.         0.04862243 0.00445878 0.        ]
2022-08-20 00:22:07,473 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:22:07,473 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:22:07,482 - shap - INFO - phi = [-0.01478228 -0.00429622 -0.00751721 -0.02843197 -0.00409462 -0.00132762
  0.         -0.05201994  0.          0.         -0.0059554   0.
  0.         -0.01201438  0.         -0.00211835 -0.00332018  0.
  0.         -0.00215999 -0.04456444 -0.00935292 -0.0538783  -0.05196324
 -0.00677625 -0.00199338  0.         -0.04862243 -0.00445878  0.        ]
2022-08-20 00:22:28,919 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:22:29,224 - shap - INFO - num_full_subsets = 1
2022-08-20 00:22:29,224 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:22:29,224 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:22:29,281 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:22:35,378 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:22:35,379 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:22:35,388 - shap - INFO - phi = [0.02281305 0.01015464 0.01389024 0.01809819 0.00509418 0.00373311
 0.         0.03504782 0.         0.00148404 0.         0.
 0.         0.01030244 0.         0.00263493 0.00115118 0.
 0.         0.00379533 0.06922022 0.02226827 0.04640825 0.0490633
 0.00583205 0.0070876  0.         0.05300729 0.0077167  0.        ]
2022-08-20 00:22:35,389 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:22:35,389 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:22:35,396 - shap - INFO - phi = [-0.02281305 -0.01015464 -0.01389024 -0.01809819 -0.00509418 -0.00373311
  0.         -0.03504782  0.         -0.00148404  0.          0.
  0.         -0.01030244  0.         -0.00263493 -0.00115118  0.
  0.         -0.00379533 -0.06922022 -0.02226827 -0.04640825 -0.0490633
 -0.00583205 -0.0070876   0.         -0.05300729 -0.0077167   0.        ]
2022-08-20 00:23:07,630 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:23:07,946 - shap - INFO - num_full_subsets = 1
2022-08-20 00:23:07,946 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:23:07,946 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:23:08,003 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:23:14,352 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:23:14,352 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:23:14,361 - shap - INFO - phi = [0.00270139 0.00746587 0.01411541 0.02202487 0.0014844  0.00246225
 0.00413156 0.03288973 0.         0.         0.00551404 0.
 0.00080879 0.01142351 0.         0.00336522 0.         0.
 0.         0.00744689 0.04148166 0.01867784 0.05710418 0.05630421
 0.00842171 0.00201383 0.         0.04033462 0.00555572 0.        ]
2022-08-20 00:23:14,362 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:23:14,362 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 00:23:14,370 - shap - INFO - phi = [-0.00270139 -0.00746587 -0.01411541 -0.02202487 -0.0014844  -0.00246225
 -0.00413156 -0.03288973  0.          0.         -0.00551404  0.
 -0.00080879 -0.01142351  0.         -0.00336522  0.          0.
  0.         -0.00744689 -0.04148166 -0.01867784 -0.05710418 -0.05630421
 -0.00842171 -0.00201383  0.         -0.04033462 -0.00555572  0.        ]
2022-08-20 00:23:33,718 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:23:34,026 - shap - INFO - num_full_subsets = 1
2022-08-20 00:23:34,026 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:23:34,026 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:23:34,083 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:23:40,089 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:23:40,089 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 00:23:40,099 - shap - INFO - phi = [0.01268229 0.00976986 0.01304332 0.00761845 0.         0.00376507
 0.         0.02220409 0.         0.         0.00211878 0.
 0.         0.01188403 0.         0.00111821 0.         0.
 0.         0.003233   0.05695365 0.02066313 0.06851981 0.06973247
 0.00900135 0.00283416 0.         0.05402297 0.00513112 0.        ]
2022-08-20 00:23:40,100 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:23:40,100 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 00:23:40,108 - shap - INFO - phi = [-0.01268229 -0.00976986 -0.01304332 -0.00761845  0.         -0.00376507
  0.         -0.02220409  0.          0.         -0.00211878  0.
  0.         -0.01188403  0.         -0.00111821  0.          0.
  0.         -0.003233   -0.05695365 -0.02066313 -0.06851981 -0.06973247
 -0.00900135 -0.00283416  0.         -0.05402297 -0.00513112  0.        ]
2022-08-20 00:24:20,932 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:24:21,241 - shap - INFO - num_full_subsets = 1
2022-08-20 00:24:21,242 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:24:21,242 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:24:21,298 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:24:27,462 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:24:27,462 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-08-20 00:24:27,472 - shap - INFO - phi = [0.01562885 0.0041837  0.0076413  0.01459436 0.00537833 0.00219252
 0.         0.05822614 0.         0.         0.00297328 0.
 0.00235599 0.01317975 0.         0.00511298 0.00323216 0.
 0.         0.00608379 0.04303    0.00704115 0.05551731 0.06836605
 0.00745653 0.00297305 0.         0.04777671 0.00630489 0.        ]
2022-08-20 00:24:27,473 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:24:27,473 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-08-20 00:24:27,480 - shap - INFO - phi = [-0.01562885 -0.0041837  -0.0076413  -0.01459436 -0.00537833 -0.00219252
  0.         -0.05822614  0.          0.         -0.00297328  0.
 -0.00235599 -0.01317975  0.         -0.00511298 -0.00323216  0.
  0.         -0.00608379 -0.04303    -0.00704115 -0.05551731 -0.06836605
 -0.00745653 -0.00297305  0.         -0.04777671 -0.00630489  0.        ]
2022-08-20 00:29:08,608 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:29:08,917 - shap - INFO - num_full_subsets = 1
2022-08-20 00:29:08,917 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:29:08,917 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:29:08,975 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:29:39,149 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 00:29:39,471 - shap - INFO - num_full_subsets = 1
2022-08-20 00:29:39,471 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 00:29:39,471 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 00:29:39,529 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 00:29:45,571 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:29:45,571 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 00:29:45,581 - shap - INFO - phi = [0.01269649 0.00973661 0.01088566 0.0172605  0.00492204 0.00666169
 0.         0.04218435 0.         0.00024719 0.00367155 0.
 0.00462094 0.01001453 0.00067352 0.0103979  0.00026219 0.
 0.         0.0033903  0.06204575 0.00788438 0.05097642 0.06713093
 0.00474611 0.00375192 0.         0.03492805 0.00706119 0.        ]
2022-08-20 00:29:45,582 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 00:29:45,582 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 00:29:45,589 - shap - INFO - phi = [-0.01269649 -0.00973661 -0.01088566 -0.0172605  -0.00492204 -0.00666169
  0.         -0.04218435  0.         -0.00024719 -0.00367155  0.
 -0.00462094 -0.01001453 -0.00067352 -0.0103979  -0.00026219  0.
  0.         -0.0033903  -0.06204575 -0.00788438 -0.05097642 -0.06713093
 -0.00474611 -0.00375192  0.         -0.03492805 -0.00706119  0.        ]
2022-08-20 01:10:07,288 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 01:10:07,633 - shap - INFO - num_full_subsets = 1
2022-08-20 01:10:07,634 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 01:10:07,634 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 01:10:07,699 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 01:10:14,129 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-08-20 01:10:14,130 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 01:10:14,140 - shap - INFO - phi = [0.01391874 0.01017166 0.00703629 0.00843249 0.00062459 0.0023464
 0.         0.03112392 0.         0.         0.00199318 0.
 0.00581929 0.01472341 0.00055456 0.00641151 0.         0.
 0.         0.00412757 0.05445046 0.01208934 0.05504149 0.06631348
 0.00750063 0.00598328 0.         0.05420735 0.00388825 0.00145806]
2022-08-20 01:10:14,141 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-08-20 01:10:14,141 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 01:10:14,148 - shap - INFO - phi = [-0.01391874 -0.01017166 -0.00703629 -0.00843249 -0.00062459 -0.0023464
  0.         -0.03112392  0.          0.         -0.00199318  0.
 -0.00581929 -0.01472341 -0.00055456 -0.00641151  0.          0.
  0.         -0.00412757 -0.05445046 -0.01208934 -0.05504149 -0.06631348
 -0.00750063 -0.00598328  0.         -0.05420735 -0.00388825 -0.00145806]
2022-08-20 01:13:55,021 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 01:13:55,325 - shap - INFO - num_full_subsets = 1
2022-08-20 01:13:55,325 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 01:13:55,325 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 01:13:55,383 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 01:14:01,778 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 01:14:01,778 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 01:14:01,790 - shap - INFO - phi = [ 0.01177778  0.00852633  0.01387219  0.02006966  0.00791812  0.00361348
  0.          0.03711564  0.          0.          0.00628871  0.
  0.00256529  0.01482401  0.          0.00355837  0.          0.
 -0.01679697  0.00415996  0.05305335  0.02994775  0.05722852  0.05681973
  0.00550524  0.          0.          0.04936364  0.00716197  0.        ]
2022-08-20 01:14:01,791 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 01:14:01,791 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 01:14:01,801 - shap - INFO - phi = [-0.01177778 -0.00852633 -0.01387219 -0.02006966 -0.00791812 -0.00361348
  0.         -0.03711564  0.          0.         -0.00628871  0.
 -0.00256529 -0.01482401  0.         -0.00355837  0.          0.
  0.01679697 -0.00415996 -0.05305335 -0.02994775 -0.05722852 -0.05681973
 -0.00550524  0.          0.         -0.04936364 -0.00716197  0.        ]
2022-08-20 01:16:08,709 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 01:16:09,025 - shap - INFO - num_full_subsets = 1
2022-08-20 01:16:09,026 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 01:16:09,026 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 01:16:09,083 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 01:16:15,426 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 01:16:15,427 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 01:16:15,436 - shap - INFO - phi = [0.00673244 0.01028495 0.01819148 0.02583277 0.00201749 0.0017387
 0.         0.03887613 0.         0.00281471 0.00132226 0.
 0.00416417 0.00637564 0.         0.0045266  0.00279566 0.
 0.         0.0024456  0.05146611 0.01517086 0.07018713 0.04795075
 0.00382311 0.00447817 0.         0.04595833 0.0035277  0.        ]
2022-08-20 01:16:15,436 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-08-20 01:16:15,436 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-08-20 01:16:15,444 - shap - INFO - phi = [-0.00673244 -0.01028495 -0.01819148 -0.02583277 -0.00201749 -0.0017387
  0.         -0.03887613  0.         -0.00281471 -0.00132226  0.
 -0.00416417 -0.00637564  0.         -0.0045266  -0.00279566  0.
  0.         -0.0024456  -0.05146611 -0.01517086 -0.07018713 -0.04795075
 -0.00382311 -0.00447817  0.         -0.04595833 -0.0035277   0.        ]
2022-08-20 01:19:38,889 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 01:19:39,202 - shap - INFO - num_full_subsets = 1
2022-08-20 01:19:39,202 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 01:19:39,202 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 01:19:39,261 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 01:19:45,404 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-08-20 01:19:45,404 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 01:19:45,413 - shap - INFO - phi = [0.01759291 0.00708102 0.01225109 0.00572241 0.00157701 0.00490528
 0.00453361 0.02546543 0.00040016 0.         0.00170549 0.
 0.0037551  0.01572694 0.         0.00972549 0.00750217 0.
 0.         0.00323498 0.06067025 0.02144553 0.0478777  0.04919979
 0.00462756 0.00767487 0.         0.05572304 0.01042846 0.        ]
2022-08-20 01:19:45,414 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-08-20 01:19:45,414 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 01:19:45,421 - shap - INFO - phi = [-0.01759291 -0.00708102 -0.01225109 -0.00572241 -0.00157701 -0.00490528
 -0.00453361 -0.02546543 -0.00040016  0.         -0.00170549  0.
 -0.0037551  -0.01572694  0.         -0.00972549 -0.00750217  0.
  0.         -0.00323498 -0.06067025 -0.02144553 -0.0478777  -0.04919979
 -0.00462756 -0.00767487  0.         -0.05572304 -0.01042846  0.        ]
2022-08-20 01:23:03,332 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 01:23:03,632 - shap - INFO - num_full_subsets = 1
2022-08-20 01:23:03,633 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 01:23:03,633 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 01:23:03,691 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 01:23:10,055 - shap - INFO - np.sum(w_aug) = 30.000000000000004
2022-08-20 01:23:10,055 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 01:23:10,065 - shap - INFO - phi = [0.01203689 0.01342171 0.01773537 0.01830399 0.         0.
 0.         0.0405757  0.         0.00181441 0.00321109 0.
 0.         0.01247746 0.         0.00518073 0.         0.
 0.         0.0024243  0.05121232 0.01639349 0.0457673  0.06084589
 0.00549905 0.00587294 0.         0.02961408 0.00120482 0.        ]
2022-08-20 01:23:10,065 - shap - INFO - np.sum(w_aug) = 30.000000000000004
2022-08-20 01:23:10,065 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 01:23:10,073 - shap - INFO - phi = [-0.01203689 -0.01342171 -0.01773537 -0.01830399  0.          0.
  0.         -0.0405757   0.         -0.00181441 -0.00321109  0.
  0.         -0.01247746  0.         -0.00518073  0.          0.
  0.         -0.0024243  -0.05121232 -0.01639349 -0.0457673  -0.06084589
 -0.00549905 -0.00587294  0.         -0.02961408 -0.00120482  0.        ]
2022-08-20 01:23:39,966 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 01:23:40,278 - shap - INFO - num_full_subsets = 1
2022-08-20 01:23:40,278 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 01:23:40,278 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 01:23:40,336 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 01:23:46,468 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-08-20 01:23:46,468 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 01:23:46,478 - shap - INFO - phi = [0.02074997 0.00415024 0.01772033 0.02340593 0.00490534 0.0051475
 0.         0.03925153 0.         0.         0.00404937 0.
 0.         0.00541845 0.         0.00675925 0.         0.
 0.         0.005082   0.05937951 0.01219475 0.06870366 0.04517946
 0.00861552 0.00172126 0.         0.05008098 0.00328306 0.        ]
2022-08-20 01:23:46,478 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-08-20 01:23:46,478 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 01:23:46,487 - shap - INFO - phi = [-0.02074997 -0.00415024 -0.01772033 -0.02340593 -0.00490534 -0.0051475
  0.         -0.03925153  0.          0.         -0.00404937  0.
  0.         -0.00541845  0.         -0.00675925  0.          0.
  0.         -0.005082   -0.05937951 -0.01219475 -0.06870366 -0.04517946
 -0.00861552 -0.00172126  0.         -0.05008098 -0.00328306  0.        ]
2022-08-20 01:25:57,385 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-08-20 01:25:57,698 - shap - INFO - num_full_subsets = 1
2022-08-20 01:25:57,698 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-08-20 01:25:57,698 - shap - INFO - num_paired_subset_sizes = 14
2022-08-20 01:25:57,756 - shap - INFO - weight_left = 0.738876032213929
2022-08-20 01:26:04,259 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-08-20 01:26:04,259 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 01:26:04,268 - shap - INFO - phi = [0.01397288 0.01333709 0.01598238 0.01281983 0.00202722 0.00184189
 0.         0.02890771 0.         0.         0.         0.
 0.00119291 0.00539456 0.         0.00785506 0.00748221 0.
 0.00327369 0.00148207 0.05584119 0.02166127 0.05077269 0.05712869
 0.00469304 0.0070889  0.         0.04014671 0.00719192 0.        ]
2022-08-20 01:26:04,268 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-08-20 01:26:04,268 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-08-20 01:26:04,276 - shap - INFO - phi = [-0.01397288 -0.01333709 -0.01598238 -0.01281983 -0.00202722 -0.00184189
  0.         -0.02890771  0.          0.          0.          0.
 -0.00119291 -0.00539456  0.         -0.00785506 -0.00748221  0.
 -0.00327369 -0.00148207 -0.05584119 -0.02166127 -0.05077269 -0.05712869
 -0.00469304 -0.0070889   0.         -0.04014671 -0.00719192  0.        ]
2022-09-02 18:45:54,363 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-02 18:45:54,685 - shap - INFO - num_full_subsets = 1
2022-09-02 18:45:54,686 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-09-02 18:45:54,686 - shap - INFO - num_paired_subset_sizes = 14
2022-09-02 18:45:54,746 - shap - INFO - weight_left = 0.738876032213929
2022-09-02 18:46:00,859 - shap - INFO - np.sum(w_aug) = 30.000000000000014
2022-09-02 18:46:00,860 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-09-02 18:46:00,894 - shap - INFO - phi = [0.00784451 0.01081592 0.01693884 0.00997888 0.00339947 0.
 0.         0.02321231 0.         0.         0.00085955 0.
 0.00094291 0.01710259 0.         0.00735843 0.         0.
 0.         0.00317268 0.04651056 0.01952835 0.06045238 0.07558024
 0.00512395 0.00065709 0.         0.04149759 0.00338994 0.        ]
2022-09-02 18:46:00,895 - shap - INFO - np.sum(w_aug) = 30.000000000000014
2022-09-02 18:46:00,895 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-09-02 18:46:00,902 - shap - INFO - phi = [-0.00784451 -0.01081592 -0.01693884 -0.00997888 -0.00339947  0.
  0.         -0.02321231  0.          0.         -0.00085955  0.
 -0.00094291 -0.01710259  0.         -0.00735843  0.          0.
  0.         -0.00317268 -0.04651056 -0.01952835 -0.06045238 -0.07558024
 -0.00512395 -0.00065709  0.         -0.04149759 -0.00338994  0.        ]
2022-09-06 00:17:34,852 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-06 00:17:35,170 - shap - INFO - num_full_subsets = 1
2022-09-06 00:17:35,171 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-09-06 00:17:35,171 - shap - INFO - num_paired_subset_sizes = 14
2022-09-06 00:17:35,231 - shap - INFO - weight_left = 0.738876032213929
2022-09-06 00:57:23,462 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-06 00:57:23,787 - shap - INFO - num_full_subsets = 1
2022-09-06 00:57:23,787 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-09-06 00:57:23,787 - shap - INFO - num_paired_subset_sizes = 14
2022-09-06 00:57:23,847 - shap - INFO - weight_left = 0.738876032213929
2022-09-06 00:57:38,023 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-06 00:57:38,350 - shap - INFO - num_full_subsets = 1
2022-09-06 00:57:38,350 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-09-06 00:57:38,350 - shap - INFO - num_paired_subset_sizes = 14
2022-09-06 00:57:38,410 - shap - INFO - weight_left = 0.738876032213929
2022-09-06 00:57:58,236 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-06 00:57:58,558 - shap - INFO - num_full_subsets = 1
2022-09-06 00:57:58,558 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-09-06 00:57:58,558 - shap - INFO - num_paired_subset_sizes = 14
2022-09-06 00:57:58,617 - shap - INFO - weight_left = 0.738876032213929
2022-09-06 02:04:25,644 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-06 02:07:18,031 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 00:09:04,263 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 00:09:04,635 - shap - INFO - num_full_subsets = 1
2022-09-12 00:09:04,635 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-09-12 00:09:04,636 - shap - INFO - num_paired_subset_sizes = 14
2022-09-12 00:09:04,691 - shap - INFO - weight_left = 0.738876032213929
2022-09-12 01:04:20,657 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 01:16:01,905 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 01:18:43,218 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 01:21:32,301 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 01:31:08,452 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 01:40:50,259 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 01:53:26,165 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 01:54:49,858 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 01:56:06,390 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 01:57:19,881 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 02:01:44,567 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-12 02:02:39,697 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-13 13:06:03,557 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-13 14:19:59,115 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 21:11:31,666 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 21:19:36,223 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 21:23:57,624 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 21:26:35,836 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 21:33:18,455 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 21:35:01,306 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 21:40:48,149 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 21:46:33,824 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 22:15:19,786 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 22:21:15,517 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 22:23:46,365 - shap - WARNING - Using 190260 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 22:55:10,012 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 22:55:10,138 - shap - INFO - num_full_subsets = 4
2022-09-22 22:55:11,278 - shap - INFO - phi = [ 0.02703224  0.05679051  0.00217489 -0.00813889  0.00735723 -0.06642345
 -0.12928997  0.10954258]
2022-09-22 22:55:11,279 - shap - INFO - phi = [-0.02703224 -0.05679051 -0.00217489  0.00813889 -0.00735723  0.06642345
  0.12928997 -0.10954258]
2022-09-22 22:56:33,294 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 22:56:33,424 - shap - INFO - num_full_subsets = 4
2022-09-22 22:56:34,626 - shap - INFO - phi = [ 0.05188044  0.08834716  0.00595397  0.01670815  0.04511117 -0.01380458
 -0.06265251  0.15255343]
2022-09-22 22:56:34,626 - shap - INFO - phi = [-0.05188044 -0.08834716 -0.00595397 -0.01670815 -0.04511117  0.01380458
  0.06265251 -0.15255343]
2022-09-22 23:01:58,991 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 23:01:59,127 - shap - INFO - num_full_subsets = 4
2022-09-22 23:02:00,244 - shap - INFO - phi = [ 0.0513974   0.06149086  0.01659305  0.00928584  0.00643857 -0.0462858
 -0.08624901  0.16394366]
2022-09-22 23:02:00,245 - shap - INFO - phi = [-0.0513974  -0.06149086 -0.01659305 -0.00928584 -0.00643857  0.0462858
  0.08624901 -0.16394366]
2022-09-22 23:11:55,695 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-22 23:11:55,816 - shap - INFO - num_full_subsets = 4
2022-09-22 23:11:56,990 - shap - INFO - phi = [ 0.06333792  0.06958722  0.01488612  0.01342783  0.02397698 -0.01399735
 -0.04912698  0.12238744]
2022-09-22 23:11:56,990 - shap - INFO - phi = [-0.06333792 -0.06958722 -0.01488612 -0.01342783 -0.02397698  0.01399735
  0.04912698 -0.12238744]
2022-09-23 00:02:00,110 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 00:02:00,274 - shap - INFO - num_full_subsets = 4
2022-09-23 00:02:00,709 - shap - INFO - phi = [ 0.04921666  0.20600325 -0.00622336  0.00095832  0.04964047 -0.00929437
 -0.01832057  0.0584649 ]
2022-09-23 00:02:00,710 - shap - INFO - phi = [-0.04921666 -0.20600325  0.00622336 -0.00095832 -0.04964048  0.00929437
  0.01832057 -0.0584649 ]
2022-09-23 00:03:01,765 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 00:03:01,883 - shap - INFO - num_full_subsets = 4
2022-09-23 00:03:02,568 - shap - INFO - phi = [ 1.31365741e-03  2.65401786e-02 -6.80142196e-03 -4.31175595e-02
  1.43153108e-01 -1.84623016e-02 -4.54695767e-05  3.59614749e-02]
2022-09-23 00:03:02,569 - shap - INFO - phi = [-1.31365741e-03 -2.65401786e-02  6.80142196e-03  4.31175595e-02
 -1.43153108e-01  1.84623016e-02  4.54695767e-05 -3.59614749e-02]
2022-09-23 00:04:22,339 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 00:04:22,447 - shap - INFO - num_full_subsets = 4
2022-09-23 00:04:23,114 - shap - INFO - phi = [ 2.68725198e-03  6.10032242e-02  8.05431548e-03 -3.45349702e-02
  9.15505126e-02 -1.58850033e-02 -8.22585979e-05  5.04013724e-02]
2022-09-23 00:04:23,114 - shap - INFO - phi = [-2.68725198e-03 -6.10032242e-02 -8.05431548e-03  3.45349702e-02
 -9.15505126e-02  1.58850033e-02  8.22585979e-05 -5.04013724e-02]
2022-09-23 00:06:51,241 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 00:06:51,356 - shap - INFO - num_full_subsets = 4
2022-09-23 00:06:52,054 - shap - INFO - phi = [ 3.63095238e-03  7.87855489e-02 -4.74619709e-03 -2.56142526e-02
  6.79877646e-02 -1.35243056e-02  2.56283069e-05  6.01215278e-02]
2022-09-23 00:06:52,055 - shap - INFO - phi = [-3.63095238e-03 -7.87855489e-02  4.74619709e-03  2.56142526e-02
 -6.79877646e-02  1.35243056e-02 -2.56283069e-05 -6.01215278e-02]
2022-09-23 00:16:11,017 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 00:16:11,151 - shap - INFO - num_full_subsets = 4
2022-09-23 00:16:11,792 - shap - INFO - phi = [ 0.02003219  0.02915712  0.01196419 -0.02430347  0.10240901  0.02775332
 -0.00242102  0.01240044]
2022-09-23 00:16:11,793 - shap - INFO - phi = [-0.02003219 -0.02915712 -0.01196419  0.02430347 -0.10240901 -0.02775332
  0.00242102 -0.01240044]
2022-09-23 00:18:33,935 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 00:18:34,095 - shap - INFO - num_full_subsets = 4
2022-09-23 00:18:34,501 - shap - INFO - phi = [ 0.03891543  0.22685105  0.00959922  0.00452038  0.00593819  0.04060747
 -0.05278401  0.08192559]
2022-09-23 00:18:34,502 - shap - INFO - phi = [-0.03891543 -0.22685104 -0.00959922 -0.00452039 -0.0059382  -0.04060747
  0.05278401 -0.08192559]
2022-09-23 00:20:00,530 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 00:20:00,685 - shap - INFO - num_full_subsets = 4
2022-09-23 00:20:01,141 - shap - INFO - phi = [ 0.06054567  0.19685585  0.00398638  0.01454102  0.00277341  0.04949162
 -0.0773169   0.07894774]
2022-09-23 00:20:01,142 - shap - INFO - phi = [-0.06054567 -0.19685585 -0.00398638 -0.01454102 -0.00277341 -0.04949162
  0.0773169  -0.07894774]
2022-09-23 00:22:04,266 - shap - WARNING - Using 576 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 00:22:04,404 - shap - INFO - num_full_subsets = 4
2022-09-23 00:22:05,611 - shap - INFO - phi = [ 0.0413541   0.09220695  0.01703689  0.03884596  0.02703239 -0.0313174
 -0.04953623  0.10607872]
2022-09-23 00:22:05,612 - shap - INFO - phi = [-0.0413541  -0.09220695 -0.01703689 -0.03884596 -0.02703239  0.0313174
  0.04953623 -0.10607872]
2022-09-23 13:31:03,430 - shap - INFO - num_full_subsets = 2
2022-09-23 13:31:03,430 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:31:03,430 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:31:03,458 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:31:03,825 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:31:03,825 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999997
2022-09-23 13:31:03,839 - shap - INFO - phi = [-0.02375117  0.         -0.02590328  0.          0.          0.
  0.          0.         -0.00331273  0.00653285  0.02637494 -0.0137277
 -0.00107995 -0.01546188 -0.01244923 -0.00745634 -0.02611976 -0.00709115
 -0.0074921 ]
2022-09-23 13:31:03,840 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:31:03,840 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999997
2022-09-23 13:31:03,844 - shap - INFO - phi = [ 0.02375117  0.          0.02590328  0.          0.          0.
  0.          0.          0.00331273 -0.00653285 -0.02637494  0.0137277
  0.00107995  0.01546188  0.01244923  0.00745634  0.02611976  0.00709115
  0.0074921 ]
2022-09-23 13:31:35,678 - shap - INFO - num_full_subsets = 2
2022-09-23 13:31:35,679 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:31:35,679 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:31:35,707 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:31:36,101 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:31:36,101 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-09-23 13:31:36,106 - shap - INFO - phi = [-0.0238794   0.         -0.02590075  0.          0.          0.
  0.          0.         -0.00304825  0.00630825  0.02610395 -0.01381338
 -0.0008378  -0.01551721 -0.01219832 -0.00721928 -0.0261176  -0.00700571
 -0.00781202]
2022-09-23 13:31:36,107 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:31:36,107 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-09-23 13:31:36,112 - shap - INFO - phi = [ 0.0238794   0.          0.02590075  0.          0.          0.
  0.          0.          0.00304825 -0.00630825 -0.02610395  0.01381338
  0.0008378   0.01551721  0.01219832  0.00721928  0.0261176   0.00700571
  0.00781202]
2022-09-23 13:33:01,975 - shap - INFO - num_full_subsets = 2
2022-09-23 13:33:01,976 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:33:01,976 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:33:02,002 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:33:02,354 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 13:33:02,354 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-09-23 13:33:02,359 - shap - INFO - phi = [-0.02408211  0.         -0.02564335  0.          0.          0.
  0.          0.         -0.00318033  0.00643261  0.02648531 -0.01368687
 -0.00093694 -0.01560751 -0.01216402 -0.00757682 -0.02597247 -0.00724371
 -0.00776129]
2022-09-23 13:33:02,359 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 13:33:02,359 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-09-23 13:33:02,363 - shap - INFO - phi = [ 0.02408211  0.          0.02564335  0.          0.          0.
  0.          0.          0.00318033 -0.00643261 -0.02648531  0.01368687
  0.00093694  0.01560751  0.01216402  0.00757682  0.02597247  0.00724371
  0.00776129]
2022-09-23 13:33:41,229 - shap - INFO - num_full_subsets = 2
2022-09-23 13:33:41,229 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:33:41,230 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:33:41,262 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:33:41,639 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 13:33:41,639 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:33:41,644 - shap - INFO - phi = [-0.02379602  0.         -0.02543874  0.          0.          0.
  0.          0.         -0.0031228   0.00629807  0.02633594 -0.01389017
 -0.00077665 -0.01598924 -0.01216912 -0.00719678 -0.02617111 -0.00745254
 -0.00756835]
2022-09-23 13:33:41,645 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 13:33:41,645 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:33:41,650 - shap - INFO - phi = [ 0.02379602  0.          0.02543874  0.          0.          0.
  0.          0.          0.0031228  -0.00629807 -0.02633594  0.01389017
  0.00077665  0.01598924  0.01216912  0.00719678  0.02617111  0.00745254
  0.00756835]
2022-09-23 13:37:45,964 - shap - INFO - num_full_subsets = 2
2022-09-23 13:37:45,965 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:37:45,965 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:37:45,996 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:37:46,361 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:37:46,361 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:37:46,366 - shap - INFO - phi = [-0.02391962  0.         -0.02602033  0.          0.          0.
  0.          0.         -0.00315642  0.00650348  0.02651057 -0.01385441
 -0.0009421  -0.0153646  -0.01224193 -0.00738279 -0.02607478 -0.00748939
 -0.00750521]
2022-09-23 13:37:46,367 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:37:46,367 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:37:46,372 - shap - INFO - phi = [ 0.02391962  0.          0.02602033  0.          0.          0.
  0.          0.          0.00315642 -0.00650348 -0.02651057  0.01385441
  0.0009421   0.0153646   0.01224193  0.00738279  0.02607478  0.00748939
  0.00750521]
2022-09-23 13:38:49,555 - shap - INFO - num_full_subsets = 2
2022-09-23 13:38:49,555 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:38:49,555 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:38:49,581 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:38:49,941 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:38:49,941 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:38:49,946 - shap - INFO - phi = [-0.02407653  0.         -0.0259032   0.          0.          0.
  0.          0.         -0.00335424  0.00654537  0.02653429 -0.01380531
 -0.00089551 -0.01551516 -0.01243321 -0.00726489 -0.02619699 -0.00705615
 -0.00751599]
2022-09-23 13:38:49,947 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:38:49,947 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:38:49,951 - shap - INFO - phi = [ 0.02407653  0.          0.0259032   0.          0.          0.
  0.          0.          0.00335424 -0.00654537 -0.02653429  0.01380531
  0.00089551  0.01551516  0.01243321  0.00726489  0.02619699  0.00705615
  0.00751599]
2022-09-23 13:50:39,753 - shap - INFO - num_full_subsets = 2
2022-09-23 13:50:39,754 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:50:39,754 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:50:39,787 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:50:40,137 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:50:40,137 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-09-23 13:50:40,143 - shap - INFO - phi = [-0.12514599  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01603136 -0.08087259  0.          0.08876805
  0.        ]
2022-09-23 13:50:40,144 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:50:40,144 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-09-23 13:50:40,147 - shap - INFO - phi = [ 0.12514599  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01603136  0.08087259  0.         -0.08876805
  0.        ]
2022-09-23 13:54:02,213 - shap - INFO - num_full_subsets = 2
2022-09-23 13:54:02,214 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:54:02,214 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:54:02,240 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:54:02,570 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:54:02,570 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-09-23 13:54:02,575 - shap - INFO - phi = [-0.12375005  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.0144672  -0.07943074  0.          0.08749443
  0.        ]
2022-09-23 13:54:02,576 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:54:02,576 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-09-23 13:54:02,580 - shap - INFO - phi = [ 0.12375005  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.0144672   0.07943074  0.         -0.08749443
  0.        ]
2022-09-23 13:55:16,757 - shap - INFO - num_full_subsets = 2
2022-09-23 13:55:16,758 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:55:16,758 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:55:16,791 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:55:17,120 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:55:17,120 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:55:17,125 - shap - INFO - phi = [-0.12455474  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01558013 -0.08000616  0.          0.0877616
  0.        ]
2022-09-23 13:55:17,126 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:55:17,126 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:55:17,131 - shap - INFO - phi = [ 0.12455474  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01558013  0.08000616  0.         -0.0877616
  0.        ]
2022-09-23 13:56:46,284 - shap - INFO - num_full_subsets = 2
2022-09-23 13:56:46,285 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:56:46,285 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:56:46,315 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:56:46,648 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 13:56:46,648 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:56:46,654 - shap - INFO - phi = [-0.12395841  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01554519 -0.08052829  0.          0.08772235
  0.        ]
2022-09-23 13:56:46,654 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 13:56:46,654 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:56:46,659 - shap - INFO - phi = [ 0.12395841  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01554519  0.08052829  0.         -0.08772235
  0.        ]
2022-09-23 13:57:49,056 - shap - INFO - num_full_subsets = 2
2022-09-23 13:57:49,057 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:57:49,057 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:57:49,088 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:57:49,421 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:57:49,421 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:57:49,426 - shap - INFO - phi = [-0.12446462  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.0148289  -0.07980316  0.          0.08821971
  0.        ]
2022-09-23 13:57:49,427 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:57:49,427 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:57:49,431 - shap - INFO - phi = [ 0.12446462  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.0148289   0.07980316  0.         -0.08821971
  0.        ]
2022-09-23 13:58:10,039 - shap - INFO - num_full_subsets = 2
2022-09-23 13:58:10,040 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:58:10,040 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:58:10,066 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:58:10,407 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:58:10,407 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:58:10,413 - shap - INFO - phi = [-0.12464127  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01537913 -0.08016125  0.          0.08820423
  0.        ]
2022-09-23 13:58:10,413 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:58:10,414 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:58:10,419 - shap - INFO - phi = [ 0.12464127  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01537913  0.08016125  0.         -0.08820423
  0.        ]
2022-09-23 13:58:29,119 - shap - INFO - num_full_subsets = 2
2022-09-23 13:58:29,119 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:58:29,120 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:58:29,148 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:58:29,464 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 13:58:29,464 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:58:29,469 - shap - INFO - phi = [-0.12467597  0.          0.          0.          0.         -0.00282096
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01696627 -0.07942573  0.          0.08873721
  0.        ]
2022-09-23 13:58:29,469 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 13:58:29,469 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 13:58:29,473 - shap - INFO - phi = [ 0.12467597  0.          0.          0.          0.          0.00282096
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01696627  0.07942573  0.         -0.08873721
  0.        ]
2022-09-23 13:59:23,048 - shap - INFO - num_full_subsets = 2
2022-09-23 13:59:23,048 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:59:23,048 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:59:23,074 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:59:23,409 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:59:23,409 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-09-23 13:59:23,415 - shap - INFO - phi = [-0.12241042  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01547091 -0.08119903  0.          0.08691937
  0.        ]
2022-09-23 13:59:23,415 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:59:23,415 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-09-23 13:59:23,420 - shap - INFO - phi = [ 0.12241042  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01547091  0.08119903  0.         -0.08691937
  0.        ]
2022-09-23 13:59:40,321 - shap - INFO - num_full_subsets = 2
2022-09-23 13:59:40,321 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 13:59:40,321 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 13:59:40,354 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 13:59:40,691 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:59:40,691 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-09-23 13:59:40,695 - shap - INFO - phi = [-0.12465965  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01584293 -0.07998945  0.          0.087587
  0.        ]
2022-09-23 13:59:40,696 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 13:59:40,696 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999999
2022-09-23 13:59:40,699 - shap - INFO - phi = [ 0.12465965  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01584293  0.07998945  0.         -0.087587
  0.        ]
2022-09-23 14:00:51,043 - shap - INFO - num_full_subsets = 2
2022-09-23 14:00:51,044 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:00:51,044 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:00:51,076 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:00:51,444 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:00:51,444 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:00:51,450 - shap - INFO - phi = [-0.12395801  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01716207 -0.08081883  0.          0.08639561
  0.        ]
2022-09-23 14:00:51,450 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:00:51,451 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:00:51,456 - shap - INFO - phi = [ 0.12395801  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01716207  0.08081883  0.         -0.08639561
  0.        ]
2022-09-23 14:01:10,782 - shap - INFO - num_full_subsets = 2
2022-09-23 14:01:10,782 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:01:10,782 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:01:10,809 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:01:11,155 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:01:11,155 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999996
2022-09-23 14:01:11,160 - shap - INFO - phi = [-0.1245325   0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01513601 -0.07996361  0.          0.08814093
  0.        ]
2022-09-23 14:01:11,161 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:01:11,161 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999996
2022-09-23 14:01:11,167 - shap - INFO - phi = [ 0.1245325   0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01513601  0.07996361  0.         -0.08814093
  0.        ]
2022-09-23 14:01:34,309 - shap - INFO - num_full_subsets = 2
2022-09-23 14:01:34,309 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:01:34,309 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:01:34,348 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:01:34,693 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:01:34,693 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:01:34,697 - shap - INFO - phi = [-0.12357733  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01771968 -0.08197799  0.          0.08661648
  0.        ]
2022-09-23 14:01:34,698 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:01:34,698 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:01:34,701 - shap - INFO - phi = [ 0.12357733  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01771968  0.08197799  0.         -0.08661648
  0.        ]
2022-09-23 14:02:03,255 - shap - INFO - num_full_subsets = 2
2022-09-23 14:02:03,255 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:02:03,256 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:02:03,282 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:02:03,636 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:02:03,636 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:02:03,640 - shap - INFO - phi = [-0.12209291  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01559562 -0.08194195  0.          0.08722008
  0.        ]
2022-09-23 14:02:03,641 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:02:03,641 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:02:03,645 - shap - INFO - phi = [ 0.12209291  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01559562  0.08194195  0.         -0.08722008
  0.        ]
2022-09-23 14:02:19,918 - shap - INFO - num_full_subsets = 2
2022-09-23 14:02:19,918 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:02:19,918 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:02:19,944 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:02:20,288 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:02:20,288 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:02:20,292 - shap - INFO - phi = [-0.12318718  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01636456 -0.08073075  0.          0.0863342
  0.        ]
2022-09-23 14:02:20,293 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:02:20,293 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:02:20,296 - shap - INFO - phi = [ 0.12318718  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01636456  0.08073075  0.         -0.0863342
  0.        ]
2022-09-23 14:08:00,713 - shap - INFO - num_full_subsets = 2
2022-09-23 14:08:00,713 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:08:00,713 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:08:00,743 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:08:01,075 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:08:01,075 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999997
2022-09-23 14:08:01,080 - shap - INFO - phi = [-0.12363979  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01586417 -0.08038994  0.          0.0869464
  0.        ]
2022-09-23 14:08:01,080 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:08:01,080 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999997
2022-09-23 14:08:01,084 - shap - INFO - phi = [ 0.12363979  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01586417  0.08038994  0.         -0.0869464
  0.        ]
2022-09-23 14:08:45,730 - shap - INFO - num_full_subsets = 2
2022-09-23 14:08:45,730 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:08:45,731 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:08:45,758 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:08:46,088 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:08:46,088 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:08:46,093 - shap - INFO - phi = [-0.12483474  0.          0.          0.          0.         -0.00271223
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01633595 -0.07871563  0.          0.08870747
  0.        ]
2022-09-23 14:08:46,093 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:08:46,093 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:08:46,098 - shap - INFO - phi = [ 0.12483474  0.          0.          0.          0.          0.00271223
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01633595  0.07871563  0.         -0.08870747
  0.        ]
2022-09-23 14:09:26,398 - shap - INFO - num_full_subsets = 2
2022-09-23 14:09:26,398 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:09:26,398 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:09:26,431 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:09:26,781 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 14:09:26,781 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:09:26,786 - shap - INFO - phi = [-0.12569608  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01696022 -0.08062313  0.          0.08813982
  0.        ]
2022-09-23 14:09:26,786 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 14:09:26,786 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:09:26,790 - shap - INFO - phi = [ 0.12569608  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01696022  0.08062313  0.         -0.08813982
  0.        ]
2022-09-23 14:10:09,178 - shap - INFO - num_full_subsets = 2
2022-09-23 14:10:09,179 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:10:09,179 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:10:09,212 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:10:09,570 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:10:09,570 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:10:09,577 - shap - INFO - phi = [-0.12326689  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01541123 -0.08013434  0.          0.08677084
  0.        ]
2022-09-23 14:10:09,577 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:10:09,578 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:10:09,582 - shap - INFO - phi = [ 0.12326689  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01541123  0.08013434  0.         -0.08677084
  0.        ]
2022-09-23 14:22:29,218 - shap - INFO - num_full_subsets = 2
2022-09-23 14:22:29,218 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:22:29,218 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:22:29,246 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:22:29,614 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:22:29,614 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:22:29,620 - shap - INFO - phi = [-0.0237449   0.         -0.02559636  0.          0.          0.
  0.          0.         -0.00348011  0.00636313  0.02647827 -0.01396017
 -0.0006981  -0.01505168 -0.01247968 -0.00730088 -0.02645269 -0.00742503
 -0.0075893 ]
2022-09-23 14:22:29,621 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:22:29,621 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:22:29,627 - shap - INFO - phi = [ 0.0237449   0.          0.02559636  0.          0.          0.
  0.          0.          0.00348011 -0.00636313 -0.02647827  0.01396017
  0.0006981   0.01505168  0.01247968  0.00730088  0.02645269  0.00742503
  0.0075893 ]
2022-09-23 14:26:45,804 - shap - INFO - num_full_subsets = 2
2022-09-23 14:26:45,804 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:26:45,804 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:26:45,832 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:26:46,156 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 14:26:46,156 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:26:46,161 - shap - INFO - phi = [-0.12553224  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01687831 -0.081396    0.          0.08883076
  0.        ]
2022-09-23 14:26:46,161 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-09-23 14:26:46,162 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:26:46,166 - shap - INFO - phi = [ 0.12553224  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01687831  0.081396    0.         -0.08883076
  0.        ]
2022-09-23 14:35:02,895 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 14:35:03,225 - shap - INFO - num_full_subsets = 1
2022-09-23 14:35:03,225 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-09-23 14:35:03,225 - shap - INFO - num_paired_subset_sizes = 14
2022-09-23 14:35:03,279 - shap - INFO - weight_left = 0.738876032213929
2022-09-23 14:35:05,673 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-09-23 14:35:05,673 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-09-23 14:35:05,682 - shap - INFO - phi = [0.0312701  0.         0.04210908 0.02400304 0.01007142 0.00218433
 0.00395677 0.04077506 0.         0.         0.00725424 0.
 0.         0.01609437 0.         0.         0.00284585 0.
 0.         0.         0.04486479 0.02176195 0.02553467 0.03742633
 0.00531609 0.         0.         0.058105   0.0050654  0.        ]
2022-09-23 14:35:05,682 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-09-23 14:35:05,682 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-09-23 14:35:05,688 - shap - INFO - phi = [-0.0312701   0.         -0.04210908 -0.02400304 -0.01007142 -0.00218433
 -0.00395677 -0.04077506  0.          0.         -0.00725424  0.
  0.         -0.01609437  0.          0.         -0.00284585  0.
  0.          0.         -0.04486479 -0.02176195 -0.02553467 -0.03742633
 -0.00531609  0.          0.         -0.058105   -0.0050654   0.        ]
2022-09-23 14:37:41,795 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 14:37:42,119 - shap - INFO - num_full_subsets = 1
2022-09-23 14:37:42,119 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-09-23 14:37:42,119 - shap - INFO - num_paired_subset_sizes = 14
2022-09-23 14:37:42,175 - shap - INFO - weight_left = 0.738876032213929
2022-09-23 14:37:44,247 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-09-23 14:37:44,247 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-09-23 14:37:44,255 - shap - INFO - phi = [ 0.          0.00953926  0.01839527 -0.04759396  0.          0.
  0.00369123  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.          0.03231719  0.18255706  0.17137597
  0.          0.          0.          0.          0.          0.        ]
2022-09-23 14:37:44,256 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-09-23 14:37:44,256 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-09-23 14:37:44,262 - shap - INFO - phi = [ 0.         -0.00953926 -0.01839527  0.04759396  0.          0.
 -0.00369123  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.         -0.03231719 -0.18255706 -0.17137597
  0.          0.          0.          0.          0.          0.        ]
2022-09-23 14:46:50,462 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 14:46:50,832 - shap - INFO - num_full_subsets = 1
2022-09-23 14:46:50,833 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-09-23 14:46:50,833 - shap - INFO - num_paired_subset_sizes = 14
2022-09-23 14:46:50,928 - shap - INFO - weight_left = 0.738876032213929
2022-09-23 14:46:53,415 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-09-23 14:46:53,415 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-09-23 14:46:53,427 - shap - INFO - phi = [0.0048852  0.02004554 0.00105914 0.03347209 0.0088216  0.
 0.01558659 0.0429282  0.         0.         0.         0.
 0.01220678 0.00847005 0.00170894 0.00137883 0.00102316 0.
 0.         0.0122372  0.04677793 0.01731711 0.0361305  0.01791439
 0.0112352  0.         0.         0.06591744 0.00439129 0.00175104]
2022-09-23 14:46:53,428 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-09-23 14:46:53,428 - shap - INFO - np.sum(self.kernelWeights) = 1.0
2022-09-23 14:46:53,435 - shap - INFO - phi = [-0.0048852  -0.02004554 -0.00105914 -0.03347209 -0.0088216   0.
 -0.01558659 -0.0429282   0.          0.          0.          0.
 -0.01220678 -0.00847005 -0.00170894 -0.00137883 -0.00102316  0.
  0.         -0.0122372  -0.04677793 -0.01731711 -0.0361305  -0.01791439
 -0.0112352   0.          0.         -0.06591744 -0.00439129 -0.00175104]
2022-09-23 14:50:39,056 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-09-23 14:50:39,405 - shap - INFO - num_full_subsets = 1
2022-09-23 14:50:39,405 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-09-23 14:50:39,405 - shap - INFO - num_paired_subset_sizes = 14
2022-09-23 14:50:39,503 - shap - INFO - weight_left = 0.738876032213929
2022-09-23 14:50:41,613 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-09-23 14:50:41,613 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-09-23 14:50:41,623 - shap - INFO - phi = [ 0.          0.          0.13999861 -0.18589859  0.          0.
  0.          0.          0.          0.          0.          0.
  0.00636316  0.01553276  0.          0.          0.          0.
  0.00535698  0.          0.          0.03128933  0.1542789   0.198945
  0.          0.          0.          0.          0.          0.        ]
2022-09-23 14:50:41,623 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-09-23 14:50:41,623 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-09-23 14:50:41,630 - shap - INFO - phi = [ 0.          0.         -0.13999861  0.18589859  0.          0.
  0.          0.          0.          0.          0.          0.
 -0.00636316 -0.01553276  0.          0.          0.          0.
 -0.00535698  0.          0.         -0.03128933 -0.1542789  -0.198945
  0.          0.          0.          0.          0.          0.        ]
2022-09-23 14:52:36,310 - shap - INFO - num_full_subsets = 2
2022-09-23 14:52:36,311 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:52:36,311 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:52:36,345 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:52:36,715 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:52:36,715 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:52:36,721 - shap - INFO - phi = [-0.02393944  0.         -0.02581728  0.          0.          0.
  0.          0.         -0.00290879  0.00650056  0.02620142 -0.01383462
 -0.00077185 -0.01563862 -0.01230343 -0.00720157 -0.02613374 -0.00746673
 -0.00762342]
2022-09-23 14:52:36,722 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:52:36,722 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-09-23 14:52:36,727 - shap - INFO - phi = [ 0.02393944  0.          0.02581728  0.          0.          0.
  0.          0.          0.00290879 -0.00650056 -0.02620142  0.01383462
  0.00077185  0.01563862  0.01230343  0.00720157  0.02613374  0.00746673
  0.00762342]
2022-09-23 14:55:28,661 - shap - INFO - num_full_subsets = 2
2022-09-23 14:55:28,661 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-09-23 14:55:28,662 - shap - INFO - num_paired_subset_sizes = 9
2022-09-23 14:55:28,692 - shap - INFO - weight_left = 0.5381032434909889
2022-09-23 14:55:29,029 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:55:29,029 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999996
2022-09-23 14:55:29,034 - shap - INFO - phi = [-0.12488242  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01534445 -0.07959873  0.          0.08791753
  0.        ]
2022-09-23 14:55:29,034 - shap - INFO - np.sum(w_aug) = 19.0
2022-09-23 14:55:29,035 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999996
2022-09-23 14:55:29,039 - shap - INFO - phi = [ 0.12488242  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01534445  0.07959873  0.         -0.08791753
  0.        ]
2022-11-22 12:32:13,575 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-11-22 12:32:13,906 - shap - INFO - num_full_subsets = 1
2022-11-22 12:32:13,906 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-11-22 12:32:13,906 - shap - INFO - num_paired_subset_sizes = 14
2022-11-22 12:32:14,002 - shap - INFO - weight_left = 0.738876032213929
2022-11-22 12:32:16,179 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-11-22 12:32:16,179 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-11-22 12:32:16,191 - shap - INFO - phi = [ 0.          0.01307528  0.02841179 -0.12572582  0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.04427812  0.          0.          0.          0.
  0.          0.          0.          0.03127816  0.12733578  0.26360182
  0.          0.          0.          0.          0.          0.        ]
2022-11-22 12:32:16,191 - shap - INFO - np.sum(w_aug) = 30.00000000000001
2022-11-22 12:32:16,191 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-11-22 12:32:16,198 - shap - INFO - phi = [ 0.         -0.01307528 -0.02841179  0.12572582  0.          0.
  0.          0.          0.          0.          0.          0.
  0.         -0.04427812  0.          0.          0.          0.
  0.          0.          0.         -0.03127816 -0.12733578 -0.26360182
  0.          0.          0.          0.          0.          0.        ]
2022-11-22 12:36:21,706 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-11-22 12:36:22,054 - shap - INFO - num_full_subsets = 1
2022-11-22 12:36:22,055 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-11-22 12:36:22,055 - shap - INFO - num_paired_subset_sizes = 14
2022-11-22 12:36:22,150 - shap - INFO - weight_left = 0.738876032213929
2022-11-22 12:36:24,526 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-11-22 12:36:24,526 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-11-22 12:36:24,539 - shap - INFO - phi = [0.         0.01931579 0.         0.04159207 0.         0.
 0.         0.05764391 0.         0.0006065  0.00085535 0.
 0.         0.00799518 0.00243805 0.         0.         0.
 0.         0.01094272 0.03856698 0.00840703 0.03053208 0.09077108
 0.00527864 0.00337342 0.         0.05283387 0.0056079  0.        ]
2022-11-22 12:36:24,541 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-11-22 12:36:24,541 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000004
2022-11-22 12:36:24,548 - shap - INFO - phi = [ 0.         -0.01931579  0.         -0.04159207  0.          0.
  0.         -0.05764391  0.         -0.0006065  -0.00085535  0.
  0.         -0.00799518 -0.00243805  0.          0.          0.
  0.         -0.01094272 -0.03856698 -0.00840703 -0.03053208 -0.09077108
 -0.00527864 -0.00337342  0.         -0.05283387 -0.0056079   0.        ]
2022-11-22 12:39:05,389 - shap - INFO - num_full_subsets = 2
2022-11-22 12:39:05,389 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-11-22 12:39:05,389 - shap - INFO - num_paired_subset_sizes = 9
2022-11-22 12:39:05,422 - shap - INFO - weight_left = 0.5381032434909889
2022-11-22 12:39:05,743 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-11-22 12:39:05,743 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-11-22 12:39:05,750 - shap - INFO - phi = [-0.12467108  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.          0.01532677 -0.08035683  0.          0.08848197
  0.        ]
2022-11-22 12:39:05,750 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-11-22 12:39:05,750 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-11-22 12:39:05,755 - shap - INFO - phi = [ 0.12467108  0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.
  0.          0.         -0.01532677  0.08035683  0.         -0.08848197
  0.        ]
2022-11-22 12:42:16,970 - shap - INFO - num_full_subsets = 2
2022-11-22 12:42:16,971 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-11-22 12:42:16,971 - shap - INFO - num_paired_subset_sizes = 9
2022-11-22 12:42:17,002 - shap - INFO - weight_left = 0.5381032434909889
2022-11-22 12:42:17,381 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-11-22 12:42:17,381 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-11-22 12:42:17,389 - shap - INFO - phi = [-0.02395687  0.         -0.02544012  0.          0.          0.
  0.          0.         -0.00296117  0.00604832  0.02634904 -0.0138695
 -0.00095041 -0.01547785 -0.01231894 -0.00746677 -0.02612793 -0.00725857
 -0.00750675]
2022-11-22 12:42:17,389 - shap - INFO - np.sum(w_aug) = 18.999999999999996
2022-11-22 12:42:17,389 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-11-22 12:42:17,394 - shap - INFO - phi = [ 0.02395687  0.          0.02544012  0.          0.          0.
  0.          0.          0.00296117 -0.00604832 -0.02634904  0.0138695
  0.00095041  0.01547785  0.01231894  0.00746677  0.02612793  0.00725857
  0.00750675]
2022-11-22 15:25:44,760 - shap - INFO - num_full_subsets = 2
2022-11-22 15:25:44,761 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-11-22 15:25:44,761 - shap - INFO - num_paired_subset_sizes = 9
2022-11-22 15:25:44,793 - shap - INFO - weight_left = 0.5381032434909889
2022-11-22 15:25:45,170 - shap - INFO - np.sum(w_aug) = 19.0
2022-11-22 15:25:45,170 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-11-22 15:25:45,182 - shap - INFO - phi = [-0.02424833  0.00204036 -0.02590196  0.          0.00176644  0.
  0.          0.         -0.00327838  0.00617944  0.02606635 -0.0142001
 -0.00143648 -0.01605093 -0.01240638 -0.00756448 -0.02649568 -0.00736989
 -0.00803748]
2022-11-22 15:25:45,183 - shap - INFO - np.sum(w_aug) = 19.0
2022-11-22 15:25:45,183 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999998
2022-11-22 15:25:45,187 - shap - INFO - phi = [ 0.02424833 -0.00204036  0.02590196  0.         -0.00176644  0.
  0.          0.          0.00327838 -0.00617944 -0.02606635  0.0142001
  0.00143648  0.01605093  0.01240638  0.00756448  0.02649568  0.00736989
  0.00803748]
2022-11-22 15:28:37,509 - shap - INFO - num_full_subsets = 2
2022-11-22 15:28:37,510 - shap - INFO - remaining_weight_vector = [0.21046803 0.16837443 0.14432094 0.12951879 0.12026745 0.11480075
 0.11224962]
2022-11-22 15:28:37,510 - shap - INFO - num_paired_subset_sizes = 9
2022-11-22 15:28:37,536 - shap - INFO - weight_left = 0.5381032434909889
2022-11-22 15:28:37,871 - shap - INFO - np.sum(w_aug) = 19.0
2022-11-22 15:28:37,871 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999996
2022-11-22 15:28:37,877 - shap - INFO - phi = [-0.12477065  0.          0.          0.          0.         -0.0035637
  0.00341307  0.          0.          0.          0.          0.
  0.          0.          0.01664324 -0.07947472  0.          0.08653359
  0.        ]
2022-11-22 15:28:37,878 - shap - INFO - np.sum(w_aug) = 19.0
2022-11-22 15:28:37,878 - shap - INFO - np.sum(self.kernelWeights) = 0.9999999999999996
2022-11-22 15:28:37,882 - shap - INFO - phi = [ 0.12477065  0.          0.          0.          0.          0.0035637
 -0.00341307  0.          0.          0.          0.          0.
  0.          0.         -0.01664324  0.07947472  0.         -0.08653359
  0.        ]
2022-11-22 15:31:32,614 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-11-22 15:31:32,945 - shap - INFO - num_full_subsets = 1
2022-11-22 15:31:32,945 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-11-22 15:31:32,946 - shap - INFO - num_paired_subset_sizes = 14
2022-11-22 15:31:33,002 - shap - INFO - weight_left = 0.738876032213929
2022-11-22 15:31:35,409 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-11-22 15:31:35,409 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-11-22 15:31:35,420 - shap - INFO - phi = [-0.01810551  0.00643451  0.03957235  0.02126041  0.          0.
  0.00111543  0.05536098  0.00247242  0.02683222  0.          0.
  0.          0.00447182 -0.01131568  0.00827597  0.          0.
  0.00131074  0.04722748  0.05727297  0.01427287  0.04598784  0.02785396
  0.0020663   0.00888308  0.          0.05819418  0.01778214 -0.04774289]
2022-11-22 15:31:35,421 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-11-22 15:31:35,421 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-11-22 15:31:35,430 - shap - INFO - phi = [ 0.01810551 -0.00643451 -0.03957235 -0.02126041  0.          0.
 -0.00111543 -0.05536098 -0.00247242 -0.02683222  0.          0.
  0.         -0.00447182  0.01131568 -0.00827597  0.          0.
 -0.00131074 -0.04722748 -0.05727297 -0.01427287 -0.04598784 -0.02785396
 -0.0020663  -0.00888308  0.         -0.05819418 -0.01778214  0.04774289]
2022-11-22 15:34:42,397 - shap - WARNING - Using 426 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.
2022-11-22 15:34:42,736 - shap - INFO - num_full_subsets = 1
2022-11-22 15:34:42,736 - shap - INFO - remaining_weight_vector = [0.17893899 0.1237109  0.09635176 0.08016467 0.06958738 0.06223965
 0.05693513 0.05301896 0.05010292 0.04794537 0.04639159 0.04534201
 0.04473475 0.04453593]
2022-11-22 15:34:42,736 - shap - INFO - num_paired_subset_sizes = 14
2022-11-22 15:34:42,795 - shap - INFO - weight_left = 0.738876032213929
2022-11-22 15:34:44,935 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-11-22 15:34:44,935 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-11-22 15:34:44,943 - shap - INFO - phi = [0.         0.         0.00535127 0.1814983  0.         0.
 0.         0.         0.         0.         0.         0.
 0.         0.00451301 0.         0.         0.         0.
 0.         0.005085   0.         0.01023081 0.03840437 0.11899204
 0.         0.         0.00525689 0.         0.         0.        ]
2022-11-22 15:34:44,943 - shap - INFO - np.sum(w_aug) = 30.000000000000007
2022-11-22 15:34:44,943 - shap - INFO - np.sum(self.kernelWeights) = 1.0000000000000002
2022-11-22 15:34:44,950 - shap - INFO - phi = [ 0.          0.         -0.00535127 -0.1814983   0.          0.
  0.          0.          0.          0.          0.          0.
  0.         -0.00451301  0.          0.          0.          0.
  0.         -0.005085    0.         -0.01023081 -0.03840437 -0.11899204
  0.          0.         -0.00525689  0.          0.          0.        ]
